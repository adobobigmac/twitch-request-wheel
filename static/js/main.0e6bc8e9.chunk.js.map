{"version":3,"sources":["MessageHandler.js","AuthenticatedApp.js","App.js","reportWebVitals.js","index.js"],"names":["randomColor","require","tmi","GAME_REQUEST_COMMAND","GameRequest","props","updateTimeDiff","setState","timeDiff","Math","floor","Date","now","metadata","time","delete","e","onDelete","msg","state","effect","place","id","data-tip","this","username","style","backgroundColor","textAlign","borderRadius","textTransform","onMouseEnter","margin","padding","fontSize","display","justifyContent","alignItems","type","className","onClick","Component","MessageHandler","onGameChosen","game","console","log","removeGame","newMessageObj","messages","counter","onMessage","target","tags","self","message","startsWith","replace","trim","toLowerCase","filterGameCommands","sendMessage","client","say","channel","colors","count","luminosity","hue","identity","password","access_token","channels","on","connect","JSON","stringify","gameArray","Object","keys","width","marginBottom","marginTop","fontWeight","map","i","overflow","segments","segColors","onFinished","isOnlyOnce","size","upDuration","downDuration","primaryColor","contrastColor","fetch","AuthenticatedApp","failed_login","a","queryParams","queryString","parse","location","search","URLSearchParams","grant_type","code","client_id","process","client_secret","redirect_uri","method","headers","Accept","then","r","json","oauth","Authorization","userInfo","data","login","to","withRouter","loginScreen","loginUrl","href","color","App","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e6bc8e9.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport WheelComponent from 'react-wheel-of-prizes'\r\nimport ReactTooltip from 'react-tooltip'\r\nimport './messageStyles.css';\r\nconst randomColor = require('randomcolor');\r\nconst tmi = require('tmi.js');\r\n\r\nconst GAME_REQUEST_COMMAND = \"!request\";\r\nconst column = function(width) {\r\n  return (<div style={{float:'left', width:width}} />);\r\n}\r\n\r\nconst filterGameCommands = function(message) {\r\n  if(!message.startsWith(GAME_REQUEST_COMMAND)) return;\r\n  return message.replace(GAME_REQUEST_COMMAND, \"\").trim().toLowerCase();\r\n}\r\n\r\n\r\nclass GameRequest extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      timeDiff: 0\r\n    };\r\n  }\r\n\r\n  updateTimeDiff = () => {\r\n    // return Date.now();\r\n    this.setState(() => {\r\n      return {\r\n        timeDiff: `${Math.floor((Date.now()-this.props.metadata.time)/60000)} minutes ago`\r\n      };\r\n    });\r\n  }\r\n  delete = (e) => {\r\n    this.props.onDelete(this.props.msg)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n      <ReactTooltip effect=\"solid\" place=\"right\"/>\r\n      <div id=\"baseDiv\" data-tip={`Requested ${this.state.timeDiff} by ${this.props.metadata.username}`} style={{backgroundColor:'steelblue', textAlign: 'left', borderRadius: '8px', textTransform: 'capitalize'}} onMouseEnter={this.updateTimeDiff}>\r\n      <p style={{margin: '15px', padding: '4px', fontSize: '24px', display: 'flex', justifyContent: 'left', alignItems: 'center'}}>\r\n        <button type='button' className=\"deleteButton\" onClick={this.delete}>X</button>\r\n        {this.props.msg}\r\n      </p>\r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default class MessageHandler extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      messages: {},\r\n      colors: randomColor({count: 99, luminosity: 'light', hue: 'blue'}),\r\n      counter: 0\r\n    };\r\n  }\r\n\r\n  onGameChosen = (game) => {\r\n    console.log(\"Game chosen: \" + game)\r\n  }\r\n\r\n  removeGame = (game) => {\r\n    const newMessageObj = {...this.state.messages};\r\n    delete newMessageObj[game];\r\n    this.setState((state) => {\r\n      return {\r\n        ...state,\r\n        messages: newMessageObj,\r\n        counter: this.state.counter + 1\r\n      };\r\n    })\r\n  }\r\n\r\n  onMessage = (target, tags, msg, self) => {\r\n    const game = filterGameCommands(msg);\r\n    if (!game) return;\r\n    if(this.state.messages[game]) {\r\n      this.sendMessage(`/me @${tags.username}, ${game} has already been requested!`);\r\n      return;\r\n    }\r\n\r\n    this.setState((state) => {\r\n      return {\r\n        ...state,\r\n        messages: {...this.state.messages, [game]: {username: tags.username, time: Date.now()}},\r\n        counter: this.state.counter + 1\r\n      };\r\n    })\r\n    this.sendMessage(`/me @${tags.username}, ${game} has been added to the request queue.`);\r\n  }\r\n\r\n  sendMessage = (msg) => {\r\n    this.state.client.say(this.props.channel, msg)\r\n  }\r\n\r\n  componentDidMount(props) {\r\n    const client = new tmi.client({\r\n      identity: {\r\n        username: this.props.channel,\r\n        password: this.props.access_token\r\n      },\r\n      channels: [\r\n        this.props.channel\r\n      ]\r\n    });\r\n\r\n    client.on('message', this.onMessage);\r\n    client.connect();\r\n\r\n    console.log(JSON.stringify(client));\r\n\r\n    this.setState((state) => {\r\n      return {\r\n        ...state,\r\n        client\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const gameArray = Object.keys(this.state.messages);\r\n    console.log(this.state.messages);\r\n    return (\r\n      <div style={{display: 'flex'}}>\r\n        <column width=\"50vw\">\r\n          <h2 style={{marginBottom:\"0\"}}>Game Requests</h2>\r\n          <h4 style={{fontSize:\"12px\", marginTop: \"6px\", marginBottom:\"12px\", fontWeight: 400}}>Type e.g. \"!request Blather Round\" in {this.props.channel}'s chat to add</h4>\r\n          {gameArray.map((msg, i) => <GameRequest key={i} msg={msg} metadata={this.state.messages[msg]} onDelete={this.removeGame}/>)}\r\n        </column>\r\n        <column width=\"50vw\" style={{textTransform: 'capitalize'}}>\r\n          <div style={{fontSize: \"16px\", overflow: \"hidden\", width: \"600px\"}}>\r\n            <WheelComponent\r\n              key={this.state.counter}\r\n              segments={gameArray}\r\n              segColors={this.state.colors}\r\n              onFinished={this.onGameChosen}\r\n              isOnlyOnce={false}\r\n              size={250}\r\n              upDuration={100}\r\n              downDuration={1000}\r\n              primaryColor={\"white\"}\r\n              contrastColor={\"black\"}\r\n            />\r\n          </div>\r\n        </column>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","\r\nimport React, { Component } from 'react';\r\nimport MessageHandler from './MessageHandler';\r\nimport { Redirect, withRouter } from \"react-router-dom\";\r\nimport queryString from 'query-string'\r\nconst fetch = require('node-fetch');\r\n\r\nclass AuthenticatedApp extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      username: \"\",\r\n      access_token: \"\",\r\n      failed_login: false\r\n    }\r\n  }\r\n  async componentDidMount() {\r\n    const queryParams = queryString.parse(this.props.location.search);\r\n    await fetch('https://id.twitch.tv/oauth2/token?' + new URLSearchParams({\r\n      grant_type: 'authorization_code',\r\n      code: queryParams.code,\r\n      client_id: process.env.REACT_APP_TWITCH_CLIENT_ID,\r\n      client_secret: process.env.REACT_APP_TWITCH_CLIENT_SECRET,\r\n      redirect_uri: process.env.REACT_APP_REDIRECT_URI_NOENCODE\r\n    }), {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept: 'application/vnd.twitchtv.v5+json'\r\n      }\r\n    }).then(r => r.json())\r\n    .then((oauth) => {\r\n      //console.log(oauth); // access_token, refresh_token, expires_in, scope ['...']\r\n      if(!oauth.access_token) {\r\n        this.setState((state) => {\r\n          return {\r\n            ...state,\r\n            failed_login: true\r\n          };\r\n        });\r\n        return;\r\n      }\r\n\r\n      this.setState((state) => {\r\n        return {\r\n          ...state,\r\n          access_token: oauth.access_token\r\n        };\r\n      });\r\n\r\n      fetch('https://api.twitch.tv/helix/users', {\r\n        headers: {\r\n          'Client-ID': process.env.REACT_APP_TWITCH_CLIENT_ID,\r\n          Authorization: `Bearer ${oauth.access_token}`\r\n        }\r\n      })\r\n      .then(r => r.json())\r\n      .then(userInfo => {\r\n        //console.log(userInfo); //login [aka lowercase username?], display_name, profile_image_url, description\r\n        this.setState((state) => {\r\n          return {\r\n            ...state,\r\n            username: userInfo.data[0].login,\r\n          };\r\n        })\r\n      })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <p>\r\n        {this.state.failed_login\r\n          ? <Redirect to=\"/login\" />\r\n          : this.state.username && <MessageHandler channel={this.state.username} access_token={this.state.access_token} />}\r\n      </p>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default withRouter(AuthenticatedApp);\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport AuthenticatedApp from './AuthenticatedApp';\nimport React, { Component } from 'react';\nimport { HashRouter, Route } from \"react-router-dom\";\n\nconst loginScreen = function() {\n  const loginUrl = `https://id.twitch.tv/oauth2/authorize?client_id=${process.env.REACT_APP_TWITCH_CLIENT_ID}&response_type=code&scope=chat:read chat:edit&redirect_uri=${process.env.REACT_APP_REDIRECT_URI}`\n  return (\n    <a href={loginUrl} style={{backgroundColor: 'rebeccapurple', borderRadius: '5px', padding: '10px', color: 'white'}}>Log In With Twitch</a>\n  );\n}\n\nclass App extends Component {\n  render() {\n\n    return (\n      <HashRouter basename='/'>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <Route exact path=\"/login\">\n              {loginScreen()}\n            </Route>\n            <Route path=\"/\" component={AuthenticatedApp} />\n          </header>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}