{"version":3,"sources":["ChatActivity.js","lock.svg","GameRequest.js","JackboxGames.yaml","MessageHandler.js","Sidebar.js","dice.svg","star.svg","PlayerSelect.js","MainScreen.js","AuthenticatedApp.js","JackboxGameList.js","LoginScreen.js","App.js","reportWebVitals.js","index.js"],"names":["fetch","require","ActivityStatus","ChatActivity","channel","updateLastMessageTime","user","lastMessageTimes","Date","now","minsSinceLastChatMessage","Math","floor","getChatters","then","r","json","res","chatters","moderators","viewers","staff","admins","global_mods","catch","e","this","getStatusPromise","bind","a","includes","GameRequest","props","deleteRequest","onDelete","gameName","getFormattedTimeDiff","timestamp","unit","timeDiff","getTooltipContents","statusClass","state","activityStatus","metadata","username","toggleLock","updateStatus","getActivity","setState","time","lockClassName","locked","cardStatus","chosen","className","effect","place","id","onMouseEnter","src","lock","alt","onClick","type","Component","tmi","GAME_REQUEST_COMMAND","easterEggRequests","RequestName","Response","Variants","MessageHandler","componentDidMount","client","getTwitchClient","on","onMessage","connect","getGameList","rawJackboxGameList","yamlGameList","text","validGames","YAML","parse","console","warn","identity","password","access_token","channels","isModOrBroadcaster","modList","toLowerCase","checkForMiscCommands","message","startsWith","sendMessage","process","requestedGame","replace","trim","gameObj","findGame","name","partyPack","changeNextGameIdx","upcomingGames","length","numGamesAhead","setNextGame","caniplayHandler","sendConfirmationMsg","redeemingUser","isPrioritySeat","playerExitHandler","clearQueueHandler","openQueueHandler","closeQueueHandler","startGame","requestEntry","partyPackName","partyPackObj","Object","entries","formalGameName","longName","checkForGameCommand","target","tags","msg","self","cleanedMsg","messages","prevRequestedGameName","values","addGameRequest","upcoming","i","say","Sidebar","getHistoryList","history","droppableId","provided","droppableProps","ref","innerRef","map","index","draggableId","draggableProps","dragHandleProps","printGame","placeholder","getNextGameName","hasNextGame","nextGameIdx","getNextGamePartyPack","handleOnDragEnd","result","destination","_items","Array","from","fill","splice","source","_reorderedItem","newNextGameIdx","findIndex","items","reorderedItem","changeGameOrder","moveNextGameFwd","moveNextGameBack","idx","buttonPlayerSelect","nextGame","requestMode","disabled","togglePlayerSelect","onDragEnd","PlayerSelect","updateColumnSizes","columnWidth","firstColumn","current","offsetWidth","handleNewPlayerRequest","column","isQueueOpen","updateColumnForUser","interested","uObj","playing","joined","userObj","newColumn","removeUser","filter","iObj","pObj","jObj","clearQueue","openQueue","closeQueue","playerCount","streamerSeat","toggleStreamerSeat","canStartGame","game","randomizePlayers","randIdx","randUsername","numPlayersToAdd","min","randIdxArray","randUsernameArray","random","push","renderPlayerCard","curColumn","star","style","maxWidth","renderStreamerSeatToggle","defaultChecked","onChange","renderPlayerCount","React","createRef","window","addEventListener","removeEventListener","startGameClass","dice","randomColor","MainScreen","delta","counter","stateCopy","override","slice","max","addGameToQueue","gameSelected","clearModal","onWheelSpun","gameLongName","gameRequestObj","requester","setTimeout","removeGame","chatActivity","status","messageHandler","newMessageObj","showPlayerSelect","routePlayRequest","playerSelector","routeLeaveRequest","routeOpenQueueRequest","routeCloseQueueRequest","routeClearQueueRequest","setMessageHandlerRef","ps","setPlayerSelectRef","mh","colors","count","luminosity","hue","requestedBy","confettiProps","force","duration","particleCount","floorHeight","outerWidth","outerHeight","floorWidth","gameSelectedModal","logOutBtn","gameRequestArray","keys","renderGameChosenModal","onLogout","innerContent","rightColumn","mainClassName","subheading","width","segments","segColors","onFinished","isOnlyOnce","size","upDuration","downDuration","primaryColor","contrastColor","fontFamily","multilineDelimiter","AuthenticatedApp","localStorage","getItem","failed_login","getAuth","getUsers","logOut","_isMounted","error","removeItem","queryParams","queryString","location","search","requestParams","URLSearchParams","grant_type","code","client_id","client_secret","redirect_uri","method","headers","Accept","oauth","setItem","Authorization","userInfo","data","login","modInfo","modObj","user_name","token","reload","to","mainContent","withRouter","PartyPackCard","gameList","possibleMatches","GameCard","possibleMatch","JackboxGameList","partyPackList","loginUrl","LoginScreen","href","version","App","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f4bc1611.chunk.js","sourcesContent":["const fetch = require('node-fetch');\n\nexport const ActivityStatus = {\n    ACTIVE: 1,\n    IDLE: 2,\n    DISCONNECTED: 3\n};\n\nconst MAX_IDLE_TIME_MINUTES = 10;\n\nexport default class ChatActivity {\n    constructor(channel) {\n        this.channel = channel;\n        this.lastMessageTimes = {};\n        this.getStatusPromise = this.getStatusPromise.bind(this);\n    }\n\n    updateLastMessageTime = (user) => {\n        this.lastMessageTimes = {\n            ...this.lastMessageTimes,\n            [user]: Date.now()\n        };\n    }\n\n    minsSinceLastChatMessage = (user) => {\n        return Math.floor((Date.now() - this.lastMessageTimes[user]) / 60000);\n    }\n\n    // returns a PROMISE, don't just assign the value again like a dweeb. :/\n    //\n    // not just active chatters - anyone with an active connnection to twitch chat.\n    // (thank the lord almighty for free open proxy sites. CORB is annoying.)\n    // note that results are fairly heavily cached, and the API may break\n    // eventually (is undocumented), but this is what twitch themselves\n    // uses to display the list of people connected to chat - best we got.\n    getChatters = () => {\n        return fetch(`https://thingproxy.freeboard.io/fetch/https://tmi.twitch.tv/group/user/${this.channel}/chatters`)\n            .then(r => r.json())\n            .then(res => {\n                if (!res || !res.chatters) return null;\n                return [\n                  ...res.chatters.moderators,\n                  ...res.chatters.viewers,\n                  ...res.chatters.staff,\n                  ...res.chatters.admins,\n                  ...res.chatters.global_mods\n                ];\n            }).catch((e) => {\n                // don't normally like swallowing errors like this,\n                // but it's a noncritical feature built off an\n                // undocumented api, sooo....\n                return null;\n            });\n    }\n\n    async getStatusPromise(user) {\n        // broadcaster always counts as active\n        if (user === this.channel) {\n            return ActivityStatus.ACTIVE;\n        }\n\n        // sent a chat message in the last X mins?\n        if (this.lastMessageTimes[user] && this.minsSinceLastChatMessage(user) < MAX_IDLE_TIME_MINUTES) {\n            return ActivityStatus.ACTIVE;\n        }\n\n        return this.getChatters().then((chatters) =>\n            !chatters || !chatters.includes(user)\n                ? ActivityStatus.DISCONNECTED\n                : ActivityStatus.IDLE\n        );\n    }\n}\n","export default __webpack_public_path__ + \"static/media/lock.6857c469.svg\";","import {ActivityStatus} from './ChatActivity';\nimport React, {Component} from 'react';\nimport './GameRequest.css';\nimport ReactTooltip from 'react-tooltip'\nimport lock from './lock.svg';\n\nexport default class GameRequest extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            timeDiff: 0,\n            activityStatus: null\n        };\n\n        this.deleteRequest = this.deleteRequest.bind(this);\n        this.getFormattedTimeDiff = this.getFormattedTimeDiff.bind(this);\n        this.getTooltipContents = this.getTooltipContents.bind(this);\n        this.toggleLock = this.toggleLock.bind(this);\n        this.updateStatus = this.updateStatus.bind(this);\n    }\n\n    deleteRequest = (e) => {\n        this.props.onDelete(this.props.gameName)\n    }\n\n    getFormattedTimeDiff = (timestamp) => {\n        let unit = \"minute\";\n        let timeDiff = Math.floor((Date.now() - timestamp) / 60000);\n        if (timeDiff === 0) {\n            return \"just now\";\n        }\n        if (timeDiff >= 60) {\n            unit = \"hour\";\n            timeDiff = Math.floor(timeDiff / 60);\n\n            if (timeDiff >= 24) {\n                unit = \"day\";\n                timeDiff = Math.floor(timeDiff / 24);\n            }\n        }\n        return `${timeDiff} ${unit}${timeDiff === 1 ? \"\" : \"s\"} ago`;\n    }\n\n    getTooltipContents = () => {\n        let statusClass = \"\";\n        switch (this.state.activityStatus) {\n            case ActivityStatus.ACTIVE:\n                statusClass = \"active\";\n                break;\n            case ActivityStatus.IDLE:\n                statusClass = \"idle\";\n                break;\n            case ActivityStatus.DISCONNECTED:\n                statusClass = \"disconnected\";\n                break;\n            default:\n                // no data back yet; don't show an activity status indicator at all\n                break;\n        }\n\n        return (`\n            <div class=\"tooltip\">\n                <p class=\"tooltipText\">\n                    Requested ${this.state.timeDiff} by ${this.props.metadata.username}\n                </p>\n                <div class=\"status ${statusClass}\" />\n            </div>`\n        );\n    }\n\n    toggleLock = () => {\n        this.props.toggleLock(this.props.gameName)\n    }\n\n    updateStatus = async () => {\n        // return Date.now();\n        let activityStatus;\n        try {\n            activityStatus = await this.props.getActivity(this.props.metadata.username);\n            return this.setState({\n                timeDiff: this.getFormattedTimeDiff(this.props.metadata.time),\n                activityStatus\n            });\n        } catch(err) {\n            throw err;\n        }\n    }\n\n    render() {\n        const lockClassName = this.props.metadata.locked ? 'lock locked' : 'lock unlocked';\n        const cardStatus = this.props.metadata.chosen ? 'chosen' : 'pending';\n\n        return (\n            <div className=\"game-request-wrapper fade-in\">\n            \t<ReactTooltip effect=\"solid\" place=\"left\" />\n            \t<div id=\"baseDiv\"\n            \t\tclassName={`game-request ${cardStatus}`}\n            \t\tdata-tip={this.getTooltipContents()}\n            \t\tdata-html={true}\n            \t\tonMouseEnter={this.updateStatus}\n            \t>\n            \t\t<div className=\"game-request-body\">\n            \t\t    {this.props.gameName}\n            \t\t\t<div className=\"options\">\n            \t\t\t\t<img src={lock} alt=\"lock\" className={lockClassName} onClick={this.toggleLock} />\n            \t\t\t\t<button type='button' className=\"deleteButton\" onClick={this.deleteRequest}>X</button>\n            \t\t\t</div>\n            \t\t</div>\n            \t</div>\n            </div>\n        );\n    }\n}\n","export default __webpack_public_path__ + \"static/media/JackboxGames.b428395b.yaml\";","import {Component} from 'react';\nimport rawJackboxGameList from './JackboxGames.yaml';\nimport YAML from 'yaml'\nconst fetch = require('node-fetch');\nconst tmi = require('tmi.js');\n\nconst GAME_REQUEST_COMMAND = \"!request\";\n\nconst easterEggRequests = [\n    {\n        RequestName: 'Affection',\n        Response: 'there there, it\\'s going to be okay. VirtualHug',\n        Variants: [\n            'a friend',\n            'a hug',\n            'a kiss',\n            'friend',\n            'hug',\n            'kiss',\n            'affection',\n            'a shoulder to cry on',\n            'shoulder to cry on'\n        ]\n    }, {\n        RequestName: 'Goose',\n        Response: 'please don\\'t taunt the wheel. Honk.',\n        Variants: [\n            'goose',\n            'honk',\n            'meow',\n            'mrow',\n            'woof',\n            'bark',\n            'nugs',\n            'chicken nugs'\n        ]\n    }, {\n        RequestName: 'Lewmon',\n        Response: 'please don\\'t taunt the wheel. sirfar3Lewmon sirfar3Lewmon sirfar3Lewmon',\n        Variants: [\n            'lewmon',\n            'sirfar3lewmon'\n        ]\n    }\n];\n\nexport default class MessageHandler extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            client: null,\n            validGames: []\n        };\n        this.getTwitchClient = this.getTwitchClient.bind(this);\n        this.isModOrBroadcaster = this.isModOrBroadcaster.bind(this);\n        this.checkForMiscCommands = this.checkForMiscCommands.bind(this);\n        this.findGame = this.findGame.bind(this);\n        this.checkForGameCommand = this.checkForGameCommand.bind(this);\n        this.onMessage = this.onMessage.bind(this);\n        this.sendMessage = this.sendMessage.bind(this);\n    }\n\n    componentDidMount = (props) => {\n        const client = this.getTwitchClient(this.props);\n\n        client.on('message', this.onMessage);\n        client.connect();\n\n        return this.getGameList(rawJackboxGameList, client);\n    }\n\n    getGameList = async (yamlGameList, client) => {\n        return await fetch(yamlGameList)\n            .then(r => r.text())\n            .then(text => {\n                return this.setState({\n                    client,\n                    validGames: YAML.parse(text)\n                });\n            }).catch(e => {\n                console.warn(e);\n            });\n    }\n\n    getTwitchClient = (props) => {\n        return new tmi.client({\n            identity: {\n                username: props.channel,\n                password: props.access_token\n            },\n            channels: [\n                props.channel\n            ]\n        });\n    }\n\n    isModOrBroadcaster = (username) => {\n        return (this.props.channel === username || this.props.modList.includes(username.toLowerCase()));\n    }\n\n    // returns true iff a known command was found & responded to\n    checkForMiscCommands = (message, username) => {\n        //========= general =========\n        if (message.startsWith(\"!gamelist\") || message.startsWith(\"!gameslist\")) {\n            this.sendMessage(`/me @${username}, click here for a list of valid Jackbox games: ${process.env.REACT_APP_REDIRECT_URI_NOENCODE}/gamelist`);\n            return true;\n        }\n\n        if (message === \"!wheelcommands\") {\n            this.sendMessage(`/me @${username}, click here to read about all supported commands: https://github.com/asukii314/twitch-request-wheel/blob/master/src/Commands.yaml`);\n            return true;\n        }\n\n        if (message.startsWith(\"!whichpack\")) {\n            const requestedGame = message.replace(\"!whichpack\", \"\").trim();\n            if (requestedGame === \"\") {\n                this.sendMessage(`/me @${username}, please specify the game you would like to look up the party pack for: e.g. !whichpack TMP 2`);\n                return true;\n            }\n\n            const gameObj = this.findGame(requestedGame, username);\n            if (gameObj) {\n                this.sendMessage(`/me @${username}, ${gameObj.name} is a ${gameObj.partyPack} game.`);\n            }\n            return true;\n        }\n\n        //========= advance next game =========\n        if (message === \"!advancenextgame\" || message === \"!nextgamefwd\" || message === \"!nextgameforward\") {\n            if (!this.isModOrBroadcaster(username)) {\n                this.sendMessage(`/me @${username}, only channel moderators can use this command.`);\n                return true;\n            }\n            if (this.props.changeNextGameIdx(1)) {\n                if (this.props.upcomingGames.length > 0) {\n                    // console.log(this.props.upcomingGames)\n                    this.sendMessage(`/me @${username}, the next game has been changed to ${this.props.upcomingGames[0].name}.`);\n                } else {\n                    this.sendMessage(`/me @${username}, the next game has been marked as \"TBD\".`);\n                }\n            } else {\n                this.sendMessage(`/me @${username}, there are no more games in the queue to advance to!`);\n            }\n            return true;\n        }\n\n        //========= advance prev game =========\n        if (message === \"!nextgameback\" || message === \"!nextgamebackward\") {\n            if (!this.isModOrBroadcaster(username)) {\n                this.sendMessage(`/me @${username}, only channel moderators can use this command.`);\n                return true;\n            }\n            if (this.props.changeNextGameIdx(-1)) {\n                this.sendMessage(`/me @${username}, the next game has been changed to ${this.props.upcomingGames[0].name}.`);\n            } else {\n                this.sendMessage(`/me @${username}, there are no previous games in the queue to go back to!`);\n            }\n            return true;\n        }\n\n        //========= set next game =========\n        if (message.startsWith(\"!setnextgame\") || message.startsWith(\"!redeemgame\")) {\n            if (!this.isModOrBroadcaster(username)) {\n                this.sendMessage(`/me @${username}, only channel moderators can use the ${message.startsWith(\"!s\") ? \"!setNextGame\" : \"!redeemgame\"} command.`);\n                return true;\n            }\n\n            const requestedGame = message.replace(\"!setnextgame\", \"\").replace(\"!redeemgame\", \"\").trim();\n            if (requestedGame === \"\") {\n                this.sendMessage(`/me @${username}, please specify the game you would like to insert in the queue: for example, ${message.startsWith(\"!s\") ? \"!setNextGame\" : \"!redeemgame\"} TMP 2`);\n                return true;\n            }\n\n            const gameObj = this.findGame(requestedGame, username);\n            if (gameObj) {\n                const numGamesAhead = this.props.setNextGame(gameObj);\n                if (numGamesAhead === 0) {\n                    this.sendMessage(`/me @${username}, ${gameObj.name} has been inserted as the next game in the queue.`);\n                } else {\n                    this.sendMessage(`/me @${username}, ${gameObj.name} has been inserted in the queue following ${numGamesAhead} other manual game request${numGamesAhead > 1 ? 's' : ''}.`);\n                }\n\n            }\n            return true;\n        }\n\n        //========= player queue management =========\n        if (message === \"!caniplay\" || message === \"!new\") {\n            this.props?.caniplayHandler(username, {\n                sendConfirmationMsg: message !== \"!new\"\n            });\n            return true;\n        }\n\n        if (message.startsWith(\"!priorityseat\") || message.startsWith(\"!redeemseat\")) {\n            if (!this.isModOrBroadcaster(username)) {\n                this.sendMessage(`/me @${username}, only channel moderators can use this command.`);\n                return true;\n            }\n            const redeemingUser = message.replace(\"!priorityseat\", \"\").replace(\"!redeemseat\", \"\").replace(\"@\", \"\").trim();\n            if (redeemingUser === \"\") {\n                this.sendMessage(`/me @${username}, please specify the user who has redeemed a priority seat in the next game: for example, ${message.startsWith(\"!p\") ? \"!priorityseat\" : \"!redeemseat\"} @asukii314`);\n                return true;\n            }\n            this.props?.caniplayHandler(redeemingUser, {\n                sendConfirmationMsg: true,\n                isPrioritySeat: true\n            });\n            return true;\n        }\n\n        if (message === \"!leave\" || message === \"!murd\") {\n            this.props?.playerExitHandler(username);\n            return true;\n        }\n\n        if (message === \"!clear\") {\n            if (this.isModOrBroadcaster(username)) {\n                this.props?.clearQueueHandler();\n            }\n            return true;\n        }\n\n        if (message === \"!open\") {\n            if (this.isModOrBroadcaster(username)) {\n                this.props?.openQueueHandler();\n            }\n            return true;\n        }\n\n        if (message === \"!close\") {\n            if (this.isModOrBroadcaster(username)) {\n                this.props?.closeQueueHandler();\n            }\n            return true;\n        }\n\n        if (message === \"!startgame\") {\n            if (!this.isModOrBroadcaster(username)) {\n                this.sendMessage(`/me @${username}, only channel moderators can use this command.`);\n                return true;\n            }\n            if (this.props.startGame()) {\n                this.sendMessage(`/me @${username}, the game has been started.`);\n            } else {\n                this.sendMessage(`/me @${username}, the game was already started.`);\n            }\n            return true;\n        }\n\n        if (message.startsWith(\"!redeem\")) {\n            this.sendMessage(`/me @${username}, this command is no longer supported: please specify either !redeemgame or !redeemseat.`);\n            return true;\n        }\n        return;\n    }\n\n    findGame = (requestedGame, username) => {\n        // easter egg responses\n        for (let requestEntry of easterEggRequests) {\n            if (requestEntry?.Variants?.includes(requestedGame)) {\n                this.sendMessage(`/me @${username} ${requestEntry.Response}`);\n                return null;\n            }\n        }\n        // check against games\n        for (let partyPackName in this.state.validGames) {\n            const partyPackObj = this.state.validGames[partyPackName]\n            for (const [formalGameName, metadata] of Object.entries(partyPackObj)) {\n                if (metadata?.Variants?.includes(requestedGame)) {\n                    return {\n                        name: formalGameName,\n                        longName: `${formalGameName} (${partyPackName})`,\n                        partyPack: partyPackName,\n                        ...metadata\n                    };\n                }\n            }\n        }\n        this.sendMessage(`/me @${username}, ${requestedGame} could not be found in the list of valid Jackbox games. Click here for a list of valid games: ${process.env.REACT_APP_REDIRECT_URI_NOENCODE}/gamelist`);\n        return;\n    }\n\n    checkForGameCommand = (message, username) => {\n        if (!message.startsWith(GAME_REQUEST_COMMAND)) return;\n\n        const requestedGame = message.replace(GAME_REQUEST_COMMAND, \"\").trim();\n\n        if (requestedGame === \"\") {\n            this.sendMessage(`/me @${username}, please specify the game you would like to request: for example, !request TMP 2`);\n            return null;\n        }\n\n        return this.findGame(requestedGame, username);\n    }\n\n    onMessage = (target, tags, msg, self) => {\n        if (self) return;\n        this.props.onMessage(msg, tags.username, tags)\n\n        if (msg.trim() === \"!nextgame\") {\n            if (this.props.upcomingGames && this.props.upcomingGames.length > 0) {\n                let upcoming = this.props.upcomingGames[0].name;\n                if (this.props.upcomingGames.length > 1) {\n                    upcoming += `, followed by ${this.props.upcomingGames[1].name}`\n                    for (let i = 2; i < this.props.upcomingGames.length; i++) {\n                        upcoming += `, and ${this.props.upcomingGames[i].name}`\n                    }\n                }\n                this.sendMessage(`/me @${tags.username}, the next game up is ${upcoming}!`)\n            } else {\n                this.sendMessage(`/me @${tags.username}, the next game hasn't been decided yet - feel free to !request one :)`)\n            }\n\n            return;\n        }\n\n        const cleanedMsg = msg.trim().toLowerCase();\n        if (this.checkForMiscCommands(cleanedMsg, tags.username)) return;\n        const gameObj = this.checkForGameCommand(cleanedMsg, tags.username);\n        if (!gameObj) return;\n\n        if (this.props.messages[gameObj.longName]) {\n            this.sendMessage(`/me @${tags.username}, ${gameObj.name} has already been requested!`);\n            return;\n        }\n\n        let prevRequestedGameName = null;\n        for (const metadata of Object.values(this.props.messages)) {\n            if (metadata.username === tags.username) {\n                prevRequestedGameName = metadata.longName;\n                break;\n            }\n        }\n\n        if (prevRequestedGameName) {\n            if (this.props.channel === tags.username) {\n                this.sendMessage(`/me @${tags.username}, ${gameObj.name} has been added to the request queue. Your previous game request(s) weren't deleted, since you have special broadcaster privilege :P`);\n            } else {\n                this.props.onDelete(prevRequestedGameName);\n                this.sendMessage(`/me @${tags.username}, your previous request of ${prevRequestedGameName} has been replaced with ${gameObj.name}.`);\n            }\n        } else {\n            this.sendMessage(`/me @${tags.username}, ${gameObj.name} has been added to the request queue.`);\n        }\n\n        this.props.addGameRequest(gameObj, tags.username);\n        return;\n    }\n\n    sendMessage = (msg) => {\n        this.state.client.say(this.props.channel, msg)\n    }\n\n    render() {\n        return null;\n    }\n}\n","import { Component } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\nimport './Sidebar.css';\n\nexport default class Sidebar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            index: 0\n        }\n\n        this.getHistoryList = this.getHistoryList.bind(this);\n        this.getNextGameName = this.getNextGameName.bind(this);\n        this.getNextGamePartyPack = this.getNextGamePartyPack.bind(this);\n        this.hasNextGame = this.hasNextGame.bind(this);\n        this.moveNextGameBack = this.moveNextGameBack.bind(this);\n        this.moveNextGameFwd = this.moveNextGameFwd.bind(this);\n        this.printGame = this.printGame.bind(this);\n    }\n\n    getHistoryList = (history) => {\n        if (history.length === 0) {\n            return (\n                <li key='placeholder'>No games yet</li>\n            );\n        }\n        return (\n            <Droppable droppableId=\"historyList\">\n                {(provided) => (\n                    <span className=\"historyList\" {...provided.droppableProps} ref={provided.innerRef}>\n                        {history.map(({name, time}, index) => {\n                            return (\n                                <Draggable key={`${time}`} draggableId={`${time}`} index={index}>\n                                    {(provided) => (\n                                        <li ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n                                            {this.printGame(index)}\n                                        </li>\n                                    )}\n                                </Draggable>\n                            );\n                        })}\n                        {provided.placeholder}\n                    </span>\n                )}\n            </Droppable>\n        );\n    }\n\n    getNextGameName = () => {\n        return this.hasNextGame()\n            ? this.props.history[this.props.nextGameIdx].name\n            : 'not yet decided';\n    }\n\n    getNextGamePartyPack = () => {\n        return this.hasNextGame()\n            ? this.props.history[this.props.nextGameIdx].partyPack\n            : null;\n    }\n\n    handleOnDragEnd = (result) => {\n        if (!result.destination) return;\n\n        const _items = Array.from(this.props.history).fill();\n        _items[this.props.nextGameIdx] = true;\n        const [_reorderedItem] = _items.splice(result.source.index, 1);\n        _items.splice(result.destination.index, 0, _reorderedItem);\n\n        const newNextGameIdx = _items.findIndex(i => i);\n\n        const items = Array.from(this.props.history);\n        const [reorderedItem] = items.splice(result.source.index, 1);\n        items.splice(result.destination.index, 0, reorderedItem);\n\n        this.props.changeGameOrder(items, newNextGameIdx);\n    }\n\n    hasNextGame = () => {\n        return this.props.history.length > this.props.nextGameIdx;\n    }\n\n    moveNextGameFwd = () => {\n        return this.props.changeNextGameIdx(1);\n    }\n\n    moveNextGameBack = () => {\n        return this.props.changeNextGameIdx(-1);\n    }\n\n    printGame = (idx) => {\n        if (idx === this.props.nextGameIdx) {\n            return (\n                <b>{this.props.history[idx].name}</b>\n            );\n        }\n        return this.props.history[idx].name;\n    }\n\n    render() {\n        let nextGame = this.hasNextGame();\n\n        let buttonPlayerSelect;\n        switch (this.props.requestMode) {\n            case 'game':\n                buttonPlayerSelect = (\n                    <button className=\"open-seat-requests\" disabled={!nextGame} onClick={this.props.togglePlayerSelect}>\n                        OPEN SEAT REQUESTS\n                    </button>\n                )\n                break;\n            case 'seat':\n                buttonPlayerSelect = (\n                    <button className=\"return-to-wheel\" onClick={this.props.togglePlayerSelect}>\n                        RETURN TO WHEEL\n                    </button>\n                )\n                break;\n            default:\n                break;\n        }\n\n        return (\n            <div id=\"sidebar\" className={this.props.requestMode}>\n                <div className=\"sidebar-panel\">\n                    <div className=\"p sidebar-panel-up-next\"> Up Next:\n\n                        <p className=\"next-game-name\">\n                            {this.getNextGameName()}\n                        </p>\n\n                        <p className=\"next-game-party-pack\">\n                            <i>{this.getNextGamePartyPack()}</i>\n                        </p>\n\n                        {buttonPlayerSelect}\n                    </div>\n                </div>\n\n                <div className=\"nav-wrapper\">\n                    <button className=\"move-next-game-back\" onClick={this.moveNextGameBack}> &#8678; </button>\n                    <button className=\"move-next-game-fwd\" onClick={this.moveNextGameFwd}> &#8680; </button>\n                </div>\n\n                <div className=\"sidebar-panel\">\n                    <DragDropContext onDragEnd={this.handleOnDragEnd}>\n                        <p className=\"sidebar-panel-history\"> History </p>\n                        <p className=\"sidebar-panel-history-list\">\n                            {this.getHistoryList(this.props.history)}\n                        </p>\n                    </DragDropContext>\n                </div>\n            </div>\n        );\n    }\n}\n","export default __webpack_public_path__ + \"static/media/dice.021a7158.svg\";","export default __webpack_public_path__ + \"static/media/star.de82f684.svg\";","import React, { Component } from 'react';\r\nimport './playerSelect.css';\r\nimport dice from './dice.svg';\r\nimport star from './star.svg';\r\n\r\nexport default class PlayerSelect extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.firstColumn = React.createRef();\r\n        this.state = {\r\n            interested: [],\r\n            playing: [],\r\n            joined: [],\r\n            streamerSeat: false,\r\n            isQueueOpen: true\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateColumnSizes();\r\n        window.addEventListener(\"resize\", this.updateColumnSizes);\r\n        return;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateColumnSizes);\r\n        return;\r\n    }\r\n\r\n    updateColumnSizes = () => {\r\n        this.setState((state) => {\r\n            return {\r\n                ...state,\r\n                columnWidth: this.firstColumn.current.offsetWidth\r\n            };\r\n        })\r\n    }\r\n\r\n    handleNewPlayerRequest = (username, {isPrioritySeat=false}) => {\r\n        if (isPrioritySeat) {\r\n            // even if the queue is closed, still add them to the interested column for consideration\r\n            const column = (this.state.isQueueOpen ? 'playing' : 'interested');\r\n\r\n            return this.updateColumnForUser({username, isPrioritySeat}, column)\r\n                ? 'you have been successfully added to the lobby.'\r\n                : 'there was an error adding you to the lobby.';\r\n        }\r\n\r\n        if (this.state?.interested?.map((uObj) => uObj.username)?.includes(username)\r\n        || this.state?.playing?.map((uObj) => uObj.username)?.includes(username)\r\n        || this.state?.joined?.map((uObj) => uObj.username)?.includes(username)) {\r\n            return 'you are already in the lobby.';\r\n        }\r\n\r\n        if (!this.state.isQueueOpen) {\r\n            return 'the queue is currently closed; users have already been selected for this game.';\r\n        }\r\n        return this.updateColumnForUser({username}, 'interested')\r\n            ? 'you have successfully joined the lobby.'\r\n            : 'there was an error adding you to the lobby.';\r\n    }\r\n\r\n    updateColumnForUser = (userObj, newColumn) => {\r\n        if (!this.state || !this.state[newColumn]) return false;\r\n\r\n        this.removeUser(userObj.username);\r\n        this.setState((state) => {\r\n            return {\r\n                ...state,\r\n                [newColumn]: [\r\n                    ...state[newColumn],\r\n                    userObj\r\n                ]\r\n            }\r\n        });\r\n        return true;\r\n    }\r\n\r\n    removeUser = (username) => {\r\n        return this.setState((state) => {\r\n            return {\r\n                ...state,\r\n                interested: state.interested.filter((iObj) => iObj.username !== username),\r\n                playing: state.playing.filter((pObj) => pObj.username !== username),\r\n                joined:  state.joined.filter((jObj) => jObj.username !== username)\r\n            }\r\n        });\r\n    }\r\n\r\n    clearQueue = () => {\r\n        return this.setState((state) => {\r\n            return {\r\n                ...state,\r\n                interested: [],\r\n                playing: [],\r\n                joined: []\r\n            }\r\n        })\r\n    }\r\n\r\n    openQueue = () => {\r\n        return this.setState((state) => {\r\n            return {\r\n                ...state,\r\n                isQueueOpen: true\r\n            }\r\n        })\r\n    }\r\n\r\n    closeQueue = () => {\r\n        return this.setState((state) => {\r\n            return {\r\n                ...state,\r\n                isQueueOpen: false\r\n            }\r\n        })\r\n    }\r\n\r\n    playerCount = () => {\r\n        return this.state.playing.length + this.state.joined.length +\r\n                        (this.state.streamerSeat ? 1 : 0);\r\n    }\r\n\r\n    toggleStreamerSeat = () => {\r\n        this.setState((state) => {\r\n            return {\r\n                ...state,\r\n                streamerSeat: !state.streamerSeat\r\n            }\r\n        });\r\n    }\r\n\r\n    canStartGame = () => {\r\n        return this.props.game?.['Max players'] >= this.playerCount() &&\r\n                     this.props.game?.['Min players'] <= this.playerCount();\r\n    }\r\n\r\n    startGame = () => {\r\n        // clear for now; eventually, save elsewhere to report on user play history for that session\r\n        this.setState ((state) => {\r\n            return {\r\n                ...state,\r\n                interested: [],\r\n                playing: [],\r\n                joined: []\r\n            };\r\n        })\r\n        this.props.startGame();\r\n    }\r\n\r\n    randomizePlayers = () => {\r\n        const numPlayersToAdd = Math.min(\r\n            this.props.game['Max players'] - this.playerCount(),\r\n            this.state.interested.length\r\n        );\r\n\r\n        let randIdx, randUsername;\r\n        let randIdxArray = [], randUsernameArray = [];\r\n        // let interested = this.state.interested;\r\n        let playing = this.state.playing;\r\n\r\n        while(randIdxArray.length < numPlayersToAdd) {\r\n            randIdx = Math.floor(Math.random() * this.state.interested.length);\r\n            if (!randIdxArray.includes(randIdx)) {\r\n                randIdxArray.push(randIdx);\r\n                randUsername = this.state.interested[randIdx].username;\r\n                randUsernameArray.push(randUsername);\r\n                playing = [\r\n                    ...playing,\r\n                    this.state.interested[randIdx]\r\n                ];\r\n            }\r\n        }\r\n        this.setState((state) => {\r\n            return {\r\n                interested: state.interested.filter((uObj) => !randUsernameArray.includes(uObj.username)),\r\n                playing\r\n            }\r\n        })\r\n    }\r\n\r\n    renderPlayerCard = (userObj, id, curColumn) => {\r\n        return (\r\n            <div key={id} className='playerCard'>\r\n                <div className=\"playerCard-username\">\r\n                    {userObj.isPrioritySeat === true && <img src={star} alt=\"Priority seat redemption\"/>}\r\n                    <p className='playerName' style={{maxWidth: this.state.columnWidth - 25}}>{userObj.username}</p>\r\n                </div>\r\n                <div className='changeColButtonsContainer'>\r\n                    {curColumn !== 'interested' && <button className='changeCol' onClick={this.updateColumnForUser.bind(this, userObj, 'interested')}>Interested</button>}\r\n                    {curColumn !== 'playing' && <button className='changeCol' onClick={this.updateColumnForUser.bind(this, userObj, 'playing')}>Playing</button>}\r\n                    {/*curColumn !== 'joined' && <button className='changeCol' onClick={this.updateColumnForUser.bind(this, userObj, 'joined')}>Joined</button>*/}\r\n                    <button className='changeCol' onClick={this.removeUser.bind(this, userObj.username)}>X</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderStreamerSeatToggle = () => {\r\n        return (\r\n            <div className='my-toggle-group'>\r\n                <p className='toggle-label'>\r\n                    Reserve seat for streamer?\r\n                </p>\r\n                <div className='my-toggle'>\r\n                    <input type=\"checkbox\" defaultChecked={true} onChange={this.toggleStreamerSeat}/>\r\n                    <div className='my-toggle-text no' aria-hidden=\"true\">No</div>\r\n                    <div className='my-toggle-text yes' aria-hidden=\"true\">Yes</div>\r\n                    <div className='my-toggle-orb'></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderPlayerCount = () => {\r\n        let className = 'playerCount';\r\n        if (this.props.game?.['Max players'] < this.playerCount()) {\r\n            className += ' overlimit';\r\n        }\r\n        return (\r\n            <p className={className}>\r\n                {this.playerCount()} of {this.props.game?.['Max players']} seats claimed\r\n            </p>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let startGameClass = 'startGame';\r\n        if (this.playerCount() < this.props.game?.['Min players']){\r\n            startGameClass += ' disabled';\r\n        }\r\n\r\n        return (\r\n            <div className='playerSelectContainer'>\r\n                <div className=\"header\">\r\n                    {this.renderStreamerSeatToggle()}\r\n                    <div className=\"game-name\">\r\n                        <b>{this.props.game?.name ?? \"TBD\"}</b>\r\n                        {this.renderPlayerCount()}\r\n                    </div>\r\n                    <button className={startGameClass} onClick={this.startGame} disabled={!this.canStartGame()}>Start Game</button>\r\n                </div>\r\n                <div className='playerCardContainer'>\r\n                    <div ref={this.firstColumn} className='playerCardColumn interested'>\r\n                        <p className=\"playerCardColumn-header\">Interested</p>\r\n                        {this.state.interested.filter((iObj) => iObj.isPrioritySeat).map((userObj, i) => this.renderPlayerCard(userObj, i, 'interested') )}\r\n                        {this.state.interested.filter((iObj) => !iObj.isPrioritySeat).map((userObj, i) => this.renderPlayerCard(userObj, i, 'interested') )}\r\n                    </div>\r\n\r\n                    <div className='playerCardColumn playing'>\r\n                        <p className=\"playerCardColumn-header\">Playing\r\n                        <button className=\"dice\" onClick={this.randomizePlayers}>\r\n                            <img src={dice} alt=\"dice icon\"/>\r\n                        </button>\r\n                        </p>\r\n                        {this.state.playing.filter((iObj) => iObj.isPrioritySeat).map((userObj, i) => this.renderPlayerCard(userObj, i, 'playing') )}\r\n                        {this.state.playing.filter((iObj) => !iObj.isPrioritySeat).map((userObj, i) => this.renderPlayerCard(userObj, i, 'playing') )}\r\n                    </div>\r\n\r\n                    {/*<div className='playerCardColumn joined'>\r\n                        <p className=\"playerCardColumn-header\">Joined</p>\r\n                        {this.state.joined.filter((iObj) => iObj.isPrioritySeat).map((userObj, i) => this.renderPlayerCard(userObj, i, 'joined') )}\r\n                        {this.state.joined.filter((iObj) => !iObj.isPrioritySeat).map((userObj, i) => this.renderPlayerCard(userObj, i, 'joined') )}\r\n                    </div>*/}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { Component } from 'react';\nimport ConfettiExplosion from '@reonomy/react-confetti-explosion';\nimport WheelComponent from 'react-wheel-of-prizes'\nimport GameRequest from './GameRequest'\nimport MessageHandler from './MessageHandler';\nimport Sidebar from './Sidebar'\nimport PlayerSelect from './PlayerSelect';\nimport ChatActivity, { ActivityStatus } from './ChatActivity';\n\nimport './MainScreen.css';\nconst randomColor = require('randomcolor');\n\n\nexport default class MainScreen extends Component {\n    constructor(props){\n        super(props);\n        this.chatActivity = new ChatActivity(this.props.channel)\n        this.state = {\n            gameSelected: null,\n            messages: {},\n            colors: randomColor({count: 99, luminosity: 'light', hue: 'blue'}),\n            counter: 0,\n            history: [],\n            nextGameIdx: 0,\n            showPlayerSelect: false\n        };\n\n        this.playerSelector = null;\n        this.messageHandler = null;\n\n        this.changeNextGameIdx = this.changeNextGameIdx.bind(this);\n        this.moveNextGameFwd = this.moveNextGameFwd.bind(this);\n        this.moveNextGameBack = this.moveNextGameBack.bind(this);\n        this.addGameRequest = this.addGameRequest.bind(this);\n        this.toggleLock = this.toggleLock.bind(this);\n        this.setNextGame = this.setNextGame.bind(this);\n        this.addGameToQueue = this.addGameToQueue.bind(this);\n        this.onWheelSpun = this.onWheelSpun.bind(this);\n        this.removeGame = this.removeGame.bind(this);\n        this.onMessage = this.onMessage.bind(this);\n        this.togglePlayerSelect = this.togglePlayerSelect.bind(this);\n        this.routePlayRequest = this.routePlayRequest.bind(this);\n        this.routeLeaveRequest = this.routeLeaveRequest.bind(this);\n        this.routeOpenQueueRequest = this.routeOpenQueueRequest.bind(this);\n        this.routeCloseQueueRequest = this.routeCloseQueueRequest.bind(this);\n        this.routeClearQueueRequest = this.routeClearQueueRequest.bind(this);\n        this.startGame = this.startGame.bind(this);\n        this.setMessageHandlerRef = this.setMessageHandlerRef.bind(this);\n        this.setPlayerSelectRef = this.setPlayerSelectRef.bind(this);\n    }\n\n    changeNextGameIdx = (delta = 1) => {\n        if (this.state.nextGameIdx + delta > this.state.history.length) return false;\n        if (this.state.nextGameIdx + delta < 0) return false;\n        this.setState((state) => {\n            return {\n                nextGameIdx: state.nextGameIdx + delta\n            }\n        });\n        return true;\n    }\n\n    changeGameOrder = (history, nextGameIdx) => {\n        if (nextGameIdx > history.length) return false;\n        this.setState({\n            history,\n            nextGameIdx\n        });\n        return true;\n    }\n\n    moveNextGameFwd = () => {\n        return this.changeNextGameIdx();\n    }\n\n    moveNextGameBack = () => {\n        return this.changeNextGameIdx(-1);\n    }\n\n    addGameRequest = (gameObj, user) => {\n        this.setState((state) => {\n            return {\n                ...state,\n                messages: {\n                    ...this.state.messages,\n                    [gameObj.longName]: {\n                        ...gameObj,\n                        username: user,\n                        time: Date.now(),\n                        locked: false,\n                        chosen: false\n                    }\n                },\n                counter: this.state.counter + 1\n            };\n        })\n    }\n\n    toggleLock = (game) => {\n        const stateCopy = {...this.state.messages[game]};\n        stateCopy.locked = !stateCopy.locked\n\n        this.setState(() => {\n            return {\n                ...this.state,\n                messages: {\n                    ...this.state.messages,\n                    [game]: stateCopy\n                }\n            }\n        });\n    }\n\n    // @return: the number of games ahead of this one, after successfully inserting in queue\n    // (i.e. if it's the very next game, return 0; if there's one ahead, return 1; etc)\n    setNextGame = (gameObj) => {\n        let idx = this.state.nextGameIdx;\n\n        // insert next game at next up position by default, but\n        //      *after* any other manually inserted games\n        while (idx < this.state.history.length && this.state.history[idx]?.override) {\n            idx++;\n        }\n\n        this.setState((state) => {\n            return {\n                ...state,\n                history: [\n                    ...state.history.slice(0, Math.max(0, idx)),\n                    {\n                        ...gameObj,\n                        override: true,\n                        time: Date.now()\n                    },\n                    ...state.history.slice(idx)\n                ]\n            }\n        });\n\n        return idx - this.state.nextGameIdx;\n    }\n\n    addGameToQueue = (gameObj) => {\n        // update history + game card highlight color\n        this.setState((state) => {\n            return {\n                ...state,\n                gameSelected: gameObj,\n                history: [\n                    ...this.state.history,\n                    {\n                        ...gameObj,\n                        override: false\n                    }\n                ],\n                messages: {\n                    ...state.messages,\n                    [gameObj.longName]: {\n                        ...state.messages[gameObj.longName],\n                        chosen: true\n                    }\n                }\n            }\n        });\n    }\n\n    clearModal = () => {\n        this.setState({\n            gameSelected: null\n        });\n    }\n\n    onWheelSpun = (gameLongName) => {\n        const gameRequestObj = this.state.messages?.[gameLongName];\n        if (!gameRequestObj) return;\n\n        // send confirmation message in chat\n        const requester = gameRequestObj.username;\n\n        this.addGameToQueue(gameRequestObj);\n\n        // remove card unless it's locked\n        if (!this.state.messages[gameLongName].locked) {\n            setTimeout(() => {\n                this.removeGame(gameLongName);\n                this.clearModal();\n            }, 4000);\n        }\n\n        return this.chatActivity.getStatusPromise(requester).then((status) => {\n            let msg = \"\";\n            switch(status) {\n                case ActivityStatus.DISCONNECTED:\n                    msg = `/me ${gameRequestObj.name} just won the spin, but it doesn't seem like @${requester} is still around. Hope someone else wants to play!`\n                    break;\n\n                case ActivityStatus.ACTIVE:\n                    msg = `/me @${requester}, good news - ${gameRequestObj.name} just won the spin!`;\n                    break;\n\n                case ActivityStatus.IDLE:\n                default:\n                    msg = `/me @${requester}, good news - ${gameRequestObj.name} just won the spin! (I hope you're still around!)`;\n            }\n            return this.messageHandler.sendMessage(msg);\n        })\n\n    }\n\n    removeGame = (gameLongName) => {\n        const newMessageObj = {...this.state.messages};\n        delete newMessageObj[gameLongName];\n        this.setState((state) => {\n            return {\n                ...state,\n                messages: newMessageObj,\n                counter: this.state.counter + 1\n            };\n        })\n    }\n\n    onMessage = (message, user, metadata) => {\n        this.chatActivity.updateLastMessageTime(user);\n    }\n\n    togglePlayerSelect = () => {\n        this.setState((state) => {\n            return {\n                showPlayerSelect: !state.showPlayerSelect\n            }\n        })\n    }\n\n    routePlayRequest = (user, {sendConfirmationMsg = true, isPrioritySeat = false}) => {\n        const msg = this.state.showPlayerSelect\n            ? this.playerSelector?.handleNewPlayerRequest(user, {isPrioritySeat})\n            : 'sign-ups are currently closed; try again after this game wraps up!'\n\n        if (sendConfirmationMsg) {\n            this.messageHandler?.sendMessage(`/me @${user}, ${msg}`);\n        }\n    }\n\n    routeLeaveRequest = (user) => {\n        this.playerSelector?.removeUser(user);\n    }\n\n    routeOpenQueueRequest = () => {\n        this.setState((state) => {\n            return {\n                ...state,\n                showPlayerSelect: true\n            }\n        })\n        this.playerSelector?.openQueue();\n    }\n\n    routeCloseQueueRequest = () => {\n        this.playerSelector?.closeQueue();\n    }\n\n    routeClearQueueRequest = () => {\n        this.playerSelector?.clearQueue();\n    }\n\n    startGame = () => {\n        if (this.state.showPlayerSelect) {\n            this.togglePlayerSelect();\n            this.moveNextGameFwd();\n            return true;\n        }\n        return false;\n    }\n\n    setMessageHandlerRef = (ps) => {\n        this.messageHandler = ps;\n    };\n\n    setPlayerSelectRef = (mh) => {\n        this.playerSelector = mh;\n    };\n\n    renderGameChosenModal(gameObj) {\n        let confettiProps = {\n            force: 0.6,\n            duration: 3500,\n            particleCount: 100,\n            floorHeight: Math.max(window.outerWidth, window.outerHeight),\n            floorWidth: Math.max(window.outerWidth, window.outerHeight)\n        };\n        let requestedBy;\n        if (gameObj.username) {\n            requestedBy = (<h4>requested by @{gameObj.username}</h4>);\n        }\n        return (\n            <>\n                <div className=\"overlay fade-in-out\">\n                    <div className=\"confetti-wrapper\">\n                        <ConfettiExplosion {...confettiProps} />\n                    </div>\n                </div>\n                <div className=\"modal fade-in-out\" onClick={()=>this.removeGame(gameObj.longName)}>\n                    <h1>{gameObj.name}</h1>\n                    {requestedBy}\n                </div>\n            </>\n        );\n    }\n\n    render() {\n        const gameRequestArray = Object.keys(this.state.messages);\n\n\n        let gameSelectedModal;\n        if (this.state.gameSelected) {\n            gameSelectedModal = this.renderGameChosenModal(this.state.gameSelected);\n        }\n\n        let logOutBtn;\n        if (typeof this.props.onLogout === 'function') {\n            logOutBtn = (\n                <button className=\"logout\" onClick={this.props.onLogout}>Logout &#10151;</button>\n            );\n        }\n\n        let mainClassName = this.state.showPlayerSelect ? 'player-select' : 'game-select';\n\n        let subheading = this.state.showPlayerSelect ? (\n            <span className=\"subheading-player fade-in-delay\">\n                Type <b>!new</b> in {this.props.channel}'s chat if you want to join the next game\n            </span>\n        ) : (\n            <span className=\"subheading-game fade-in-delay\">\n                Type e.g. <b>\"!request Blather Round\"</b> in {this.props.channel}'s chat to add\n            </span>\n        );\n\n        let innerContent;\n        let rightColumn;\n\n        if (this.state.showPlayerSelect) {\n            innerContent = (\n                <PlayerSelect\n                    game={this.state.history?.[this.state.nextGameIdx]}\n                    startGame={this.startGame}\n                    ref={this.setPlayerSelectRef}\n                />\n            );\n        } else {\n            innerContent = gameRequestArray.map((gameName, i) =>\n                <GameRequest\n                    key={i}\n                    gameName={gameName}\n                    metadata={this.state.messages[gameName]}\n                    onDelete={this.removeGame}\n                    toggleLock={this.toggleLock.bind(gameName)}\n                    getActivity={this.chatActivity.getStatusPromise}\n                />\n            );\n            rightColumn = (\n                <div className=\"right-column\" width=\"50px\">\n                    <div className=\"wheel-wrapper fade-in\">\n                         <WheelComponent\n                            key={this.state.counter}\n                            segments={gameRequestArray}\n                            segColors={this.state.colors}\n                            onFinished={this.onWheelSpun}\n                            isOnlyOnce={false}\n                            size={250}\n                            upDuration={100}\n                            downDuration={1000}\n                            primaryColor={\"white\"}\n                            contrastColor={\"black\"}\n                            fontFamily={\"Arial\"}\n                            multilineDelimiter={' ('}\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n\n        return (\n            <div id=\"main-screen\" className={mainClassName}>\n                <MessageHandler\n                    addGameRequest={this.addGameRequest}\n                    setNextGame={this.setNextGame}\n                    changeNextGameIdx={this.changeNextGameIdx}\n                    startGame={this.startGame}\n                    messages={this.state.messages}\n                    channel={this.props.channel}\n                    modList={this.props.modList}\n                    access_token={this.props.access_token}\n                    onMessage={this.onMessage}\n                    onDelete={this.removeGame}\n                    upcomingGames={this.state.history.slice(this.state.nextGameIdx)}\n                    caniplayHandler={this.routePlayRequest}\n                    playerExitHandler={this.routeLeaveRequest}\n                    openQueueHandler={this.routeOpenQueueRequest}\n                    closeQueueHandler={this.routeCloseQueueRequest}\n                    clearQueueHandler={this.routeClearQueueRequest}\n                    ref={this.setMessageHandlerRef}\n                />\n                <div className=\"left-column fade-in\">\n                    <h2>{this.state.showPlayerSelect ? 'Seat Requests' : 'Game Requests'}</h2>\n                    <h4>{subheading}</h4>\n                    <div className=\"left-column-body\">\n                        <Sidebar\n                            changeGameOrder={this.changeGameOrder}\n                            history={this.state.history}\n                            nextGameIdx={this.state.nextGameIdx}\n                            changeNextGameIdx={this.changeNextGameIdx}\n                            moveNextGameFwd={this.moveNextGameFwd}\n                            moveNextGameBack={this.moveNextGameBack}\n                            togglePlayerSelect={this.togglePlayerSelect}\n                            requestMode={this.state.showPlayerSelect ? 'seat' : 'game'}\n                        />\n                        <div className=\"left-column-inner-body\">\n                            {innerContent}\n                        </div>\n                    </div>\n                </div>\n                {rightColumn}\n                {logOutBtn}\n                {gameSelectedModal}\n            </div>\n        )\n    }\n}\n","import React, {Component} from 'react';\nimport MainScreen from './MainScreen';\nimport {Redirect, withRouter} from \"react-router-dom\";\nimport queryString from 'query-string'\nconst fetch = require('node-fetch');\n\nclass AuthenticatedApp extends Component {\n    constructor() {\n        super();\n        this.state = {\n            username: localStorage.getItem('__username'),\n            access_token: localStorage.getItem('__access_token'),\n            failed_login: false\n        }\n        this.getAuth = this.getAuth.bind(this);\n        this.getUsers = this.getUsers.bind(this);\n        this.logOut = this.logOut.bind(this);\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n        if (!this.state.access_token) {\n            return this.getAuth();\n        }\n        return this.getUsers(this.state.access_token).catch(e => {\n            console.error(e);\n            return this.getAuth(e);\n        });\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    async getAuth(e) {\n        if (e) {\n            console.error(e);\n        }\n        localStorage.removeItem('__username');\n        localStorage.removeItem('__access_token');\n\n        const queryParams = queryString.parse(this.props.location.search);\n        const requestParams = new URLSearchParams({\n            grant_type: 'authorization_code',\n            code: queryParams.code,\n            client_id: process.env.REACT_APP_TWITCH_CLIENT_ID,\n            client_secret: process.env.REACT_APP_TWITCH_CLIENT_SECRET,\n            redirect_uri: process.env.REACT_APP_REDIRECT_URI_NOENCODE\n        });\n        return await fetch(`https://id.twitch.tv/oauth2/token?${requestParams}`, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/vnd.twitchtv.v5+json'\n            }\n        })\n        .then(r => r.json())\n        .then((oauth) => {\n            //console.log(oauth);  access_token, refresh_token, expires_in, scope ['...']\n            if (this._isMounted) {\n                if (!oauth.access_token) {\n                    return this.setState({\n                        failed_login: true\n                    });\n                }\n\n                localStorage.setItem('__access_token', oauth.access_token);\n\n                this.setState({\n                    access_token: oauth.access_token\n                });\n\n                return this.getUsers(oauth.access_token);\n            }\n            return;\n        })\n        .catch(e => {\n            console.error(e);\n            if (this._isMounted) {\n                return this.setState({\n                    failed_login: true\n                });\n            }\n            return;\n        });\n    }\n\n    getUsers(access_token) {\n        return fetch('https://api.twitch.tv/helix/users', {\n            headers: {\n                'Client-ID': process.env.REACT_APP_TWITCH_CLIENT_ID,\n                Authorization: `Bearer ${this.state.access_token}`\n            }\n        })\n        .then(r => r.json())\n        .then(userInfo => {\n            //console.log(userInfo); login [aka lowercase username?], display_name, profile_image_url, description\n            localStorage.setItem('__username', userInfo.data[0].login);\n            return fetch(`https://api.twitch.tv/helix/moderation/moderators?broadcaster_id=${userInfo.data[0].id}`, {\n                headers: {\n                    'Client-ID': process.env.REACT_APP_TWITCH_CLIENT_ID,\n                    Authorization: `Bearer ${this.state.access_token}`\n                }\n            })\n            .then(r => r.json())\n            .then(modInfo => {\n                const modList = (!modInfo.data)\n                    ? null\n                    : modInfo.data.map((modObj) => (!modObj.user_name) ? null : modObj.user_name.toLowerCase()).filter(user => user);\n                if (this._isMounted) {\n                    return this.setState({\n                        username: userInfo.data[0].login,\n                        modList\n                    });\n                }\n                return;\n            });\n        });\n    }\n\n    logOut() {\n        localStorage.removeItem('__username');\n        localStorage.removeItem('__access_token');\n\n        const requestParams = new URLSearchParams({\n            client_id: process.env.REACT_APP_TWITCH_CLIENT_ID,\n            token: this.state.access_token,\n            redirect_uri: process.env.REACT_APP_REDIRECT_URI_NOENCODE\n        });\n\n        return fetch(`https://id.twitch.tv/oauth2/revoke?${requestParams}`, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/vnd.twitchtv.v5+json'\n            }\n        }).then(() => {\n            return window.location.reload();\n        });\n    }\n\n    render() {\n        if (this.state.failed_login) {\n            return (<Redirect to=\"/login\"/>);\n        }\n        let mainContent;\n        if (this.state.username) {\n            mainContent = (\n                <MainScreen\n                    channel={this.state.username}\n                    modList={this.state.modList}\n                    access_token={this.state.access_token}\n                    onLogout={this.logOut}\n                />\n            );\n        }\n\n        return (\n            <div id=\"authenticated-app\">\n                {mainContent}\n            </div>\n        );\n    }\n}\n\nexport {AuthenticatedApp};\n\nexport default withRouter(AuthenticatedApp);\n","import { Component } from 'react';\nimport YAML from 'yaml'\nimport rawJackboxGameList from './JackboxGames.yaml';\nimport './JackboxGameList.css';\nconst fetch = require('node-fetch');\n\nconst PartyPackCard = function (props) {\n  const gameList = Object.keys(props.metadata);\n  return (\n    <div className=\"partyPackCard\">\n      <p className=\"partyPackName\">{props.partyPackName} </p>\n      {gameList.map((gameName, i) =>\n        <GameCard\n          key={i}\n          gameName={gameName}\n          possibleMatches={props.metadata?.[gameName]?.Variants}\n        />\n      )}\n    </div>\n  );\n}\n\n\n// <p> {props.gameName} <p>\n\nconst GameCard = function(props) {\n  return (\n    <div>\n      <p className=\"gameName\">{props.gameName} </p>\n      {props.possibleMatches.map((possibleMatch, i) =>\n        <li className=\"possibleGameMatch\" key={`${props.gameName}-${i}`}>!request {possibleMatch}</li>\n      )}\n    </div>\n  );\n}\n\nexport default class JackboxGameList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      validGames: []\n    };\n  }\n\n  componentDidMount(props) {\n    fetch(rawJackboxGameList)\n      .then(r => r.text())\n      .then(text => {\n        this.setState((state) => {\n          return {\n            ...state,\n            validGames: YAML.parse(text)\n          };\n        });\n      })\n    }\n\n\n\n    render() {\n      const partyPackList = Object.keys(this.state.validGames);\n      return (\n        <div className=\"partyPackList\">\n          {partyPackList.map((partyPackName, i) =>\n            <PartyPackCard\n              key={i}\n              partyPackName={partyPackName}\n              metadata={this.state.validGames[partyPackName]}\n            />\n          )}\n        </div>\n      );\n    }\n\n}\n","import React, {Component} from 'react';\nimport {version} from '../package.json';\n\nimport './LoginScreen.css';\n\nconst scopes = 'chat:read chat:edit moderation:read';\nconst loginUrl = 'https://id.twitch.tv/oauth2/authorize'\n    + `?client_id=${process.env.REACT_APP_TWITCH_CLIENT_ID}`\n    + `&response_type=code&scope=${scopes}`\n    + `&redirect_uri=${process.env.REACT_APP_REDIRECT_URI}`;\n\nclass LoginScreen extends Component {\n\n    render() {\n        return (\n            <div id=\"login-screen\" className=\"fade-in\">\n                <a href={loginUrl}>\n                    Log In With <strong>Twitch</strong>\n                </a>\n                <br/>\n                <small>\n                    {`v${version}`}\n                </small>\n            </div>\n        );\n    }\n}\n\nexport default LoginScreen;\n","import AuthenticatedApp from './AuthenticatedApp';\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\nimport JackboxGameList from './JackboxGameList';\nimport LoginScreen from './LoginScreen';\nimport React, {Component} from 'react';\n\nimport './App.css';\n\nclass App extends Component {\n    render() {\n\n        return (\n            <HashRouter basename='/'>\n                <div className=\"App\">\n                    <header className=\"App-header\">\n                        <Switch>\n                            <Route exact path=\"/login\" component={LoginScreen} />\n                            <Route exact path=\"/gamelist\" component={JackboxGameList}/>\n                            <Route path=\"/\" component={AuthenticatedApp}/>\n                        </Switch>\n                    </header>\n                </div>\n            </HashRouter>\n        );\n    }\n}\n\nexport default App;\n\nexport {LoginScreen};\n","import { ReportHandler } from 'web-vitals';\nimport { getCLS, getFID, getFCP, getLCP, getTTFB } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    getCLS(onPerfEntry);\n    getFID(onPerfEntry);\n    getFCP(onPerfEntry);\n    getLCP(onPerfEntry);\n    getTTFB(onPerfEntry);\n  }\n};\n\nexport default reportWebVitals;\n","import App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport React from 'react';\nimport {render} from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nrender(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}