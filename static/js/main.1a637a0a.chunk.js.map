{"version":3,"sources":["ChatActivity.js","lock.svg","GameRequest.js","JackboxGames.yaml","MessageHandler.js","Sidebar.js","dice.svg","star.svg","PlayerSelect.js","MainScreen.js","AuthenticatedApp.js","JackboxGameList.js","App.js","reportWebVitals.js","index.js"],"names":["fetch","require","ActivityStatus","ChatActivity","channel","updateLastMessageTime","user","lastMessageTimes","Date","now","minsSinceLastChatMessage","Math","floor","getChatters","then","r","json","res","chatters","moderators","viewers","staff","admins","global_mods","catch","e","this","getStatusPromise","bind","a","includes","GameRequest","props","deleteRequest","onDelete","gameName","getFormattedTimeDiff","timestamp","unit","timeDiff","getTooltipContents","statusClass","state","activityStatus","metadata","username","toggleLock","updateStatus","getActivity","setState","time","lockClassName","locked","cardStatus","chosen","className","effect","place","id","data-tip","data-html","onMouseEnter","src","lock","alt","onClick","type","Component","tmi","GAME_REQUEST_COMMAND","MessageHandler","isModOrBroadcaster","modList","toLowerCase","checkForMiscCommands","message","startsWith","sendMessage","process","requestedGame","replace","trim","gameObj","findGame","name","partyPack","changeNextGameIdx","upcomingGames","length","numGamesAhead","setNextGame","caniplayHandler","sendConfirmationMsg","redeemingUser","isPrioritySeat","playerExitHandler","clearQueueHandler","openQueueHandler","closeQueueHandler","startGame","partyPackName","validGames","partyPackObj","Object","entries","formalGameName","Variants","longName","checkForGameCommand","onMessage","target","tags","msg","self","cleanedMsg","messages","prevRequestedGameName","values","addGameRequest","upcoming","i","client","say","identity","password","access_token","channels","on","connect","rawJackboxGameList","text","YAML","parse","Sidebar","getHistoryList","history","map","playedGame","printGame","getNextGameName","hasNextGame","nextGameIdx","getNextGamePartyPack","moveNextGameFwd","moveNextGameBack","idx","index","buttonPlayerSelect","nextGame","requestMode","disabled","togglePlayerSelect","PlayerSelect","updateColumnSizes","columnWidth","firstColumn","current","offsetWidth","handleNewPlayerRequest","column","isQueueOpen","updateColumnForUser","interested","uObj","playing","joined","userObj","newColumn","removeUser","filter","iObj","pObj","jObj","clearQueue","openQueue","closeQueue","playerCount","streamerSeat","toggleStreamerSeat","canStartGame","game","randomizePlayers","randIdx","randUsername","numPlayersToAdd","min","randIdxArray","randUsernameArray","random","push","renderPlayerCard","curColumn","star","style","maxWidth","renderStreamerSeatToggle","defaultChecked","onChange","aria-hidden","renderPlayerCount","React","createRef","window","addEventListener","startGameClass","ref","dice","randomColor","MainScreen","delta","counter","stateCopy","override","slice","max","addGameToQueue","onWheelSpun","gameLongName","gameRequestObj","requester","setTimeout","removeGame","chatActivity","status","messageHandler","newMessageObj","showPlayerSelect","routePlayRequest","playerSelector","routeLeaveRequest","routeOpenQueueRequest","routeCloseQueueRequest","routeClearQueueRequest","setMessageHandlerRef","ps","setPlayerSelectRef","mh","colors","count","luminosity","hue","logOutBtn","gameRequestArray","keys","onLogout","innerContent","rightColumn","mainClassName","subheading","width","segments","segColors","onFinished","isOnlyOnce","size","upDuration","downDuration","primaryColor","contrastColor","fontFamily","AuthenticatedApp","localStorage","getItem","failed_login","getAuth","logOut","_isMounted","headers","Authorization","userInfo","setItem","data","login","modInfo","modObj","user_name","removeItem","requestParams","URLSearchParams","client_id","token","redirect_uri","method","Accept","location","reload","console","error","queryParams","queryString","search","grant_type","code","client_secret","oauth","to","mainContent","withRouter","PartyPackCard","gameList","possibleMatches","GameCard","possibleMatch","JackboxGameList","partyPackList","loginScreen","loginUrl","href","version","App","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a637a0a.chunk.js","sourcesContent":["const fetch = require('node-fetch');\n\nexport const ActivityStatus = {\n    ACTIVE: 1,\n    IDLE: 2,\n    DISCONNECTED: 3\n};\n\nconst MAX_IDLE_TIME_MINUTES = 10;\n\nexport default class ChatActivity {\n    constructor(channel) {\n        this.channel = channel;\n        this.lastMessageTimes = {};\n        this.getStatusPromise = this.getStatusPromise.bind(this);\n    }\n\n    updateLastMessageTime = (user) => {\n        this.lastMessageTimes = {\n            ...this.lastMessageTimes,\n            [user]: Date.now()\n        };\n    }\n\n    minsSinceLastChatMessage = (user) => {\n        return Math.floor((Date.now() - this.lastMessageTimes[user]) / 60000);\n    }\n\n    // returns a PROMISE, don't just assign the value again like a dweeb. :/\n    //\n    // not just active chatters - anyone with an active connnection to twitch chat.\n    // (thank the lord almighty for free open proxy sites. CORB is annoying.)\n    // note that results are fairly heavily cached, and the API may break\n    // eventually (is undocumented), but this is what twitch themselves\n    // uses to display the list of people connected to chat - best we got.\n    getChatters = () => {\n        return fetch(`https://thingproxy.freeboard.io/fetch/https://tmi.twitch.tv/group/user/${this.channel}/chatters`)\n            .then(r => r.json())\n            .then(res => {\n                if (!res || !res.chatters) return null;\n                return [\n                  ...res.chatters.moderators,\n                  ...res.chatters.viewers,\n                  ...res.chatters.staff,\n                  ...res.chatters.admins,\n                  ...res.chatters.global_mods\n                ];\n            }).catch((e) => {\n                // don't normally like swallowing errors like this,\n                // but it's a noncritical feature built off an\n                // undocumented api, sooo....\n                return null;\n            });\n    }\n\n    async getStatusPromise(user) {\n        // broadcaster always counts as active\n        if (user === this.channel) {\n            return ActivityStatus.ACTIVE;\n        }\n\n        // sent a chat message in the last X mins?\n        if (this.lastMessageTimes[user] && this.minsSinceLastChatMessage(user) < MAX_IDLE_TIME_MINUTES) {\n            return ActivityStatus.ACTIVE;\n        }\n\n        return this.getChatters().then((chatters) =>\n            !chatters || !chatters.includes(user)\n                ? ActivityStatus.DISCONNECTED\n                : ActivityStatus.IDLE\n        );\n    }\n}\n","export default __webpack_public_path__ + \"static/media/lock.6857c469.svg\";","import {ActivityStatus} from './ChatActivity';\nimport {Component} from 'react';\nimport './GameRequest.css';\nimport ReactTooltip from 'react-tooltip'\nimport lock from './lock.svg';\n\nexport default class GameRequest extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            timeDiff: 0,\n            activityStatus: null\n        };\n\n        this.deleteRequest = this.deleteRequest.bind(this);\n        this.getFormattedTimeDiff = this.getFormattedTimeDiff.bind(this);\n        this.getTooltipContents = this.getTooltipContents.bind(this);\n        this.toggleLock = this.toggleLock.bind(this);\n        this.updateStatus = this.updateStatus.bind(this);\n    }\n\n    deleteRequest = (e) => {\n        this.props.onDelete(this.props.gameName)\n    }\n\n    getFormattedTimeDiff = (timestamp) => {\n        let unit = \"minute\";\n        let timeDiff = Math.floor((Date.now() - timestamp) / 60000);\n        if (timeDiff === 0) {\n            return \"just now\";\n        }\n        if (timeDiff >= 60) {\n            unit = \"hour\";\n            timeDiff = Math.floor(timeDiff / 60);\n\n            if (timeDiff >= 24) {\n                unit = \"day\";\n                timeDiff = Math.floor(timeDiff / 24);\n            }\n        }\n        return `${timeDiff} ${unit}${timeDiff === 1 ? \"\" : \"s\"} ago`;\n    }\n\n    getTooltipContents = () => {\n        let statusClass = \"\";\n        switch (this.state.activityStatus) {\n            case ActivityStatus.ACTIVE:\n                statusClass = \"active\";\n                break;\n            case ActivityStatus.IDLE:\n                statusClass = \"idle\";\n                break;\n            case ActivityStatus.DISCONNECTED:\n                statusClass = \"disconnected\";\n                break;\n            default:\n                // no data back yet; don't show an activity status indicator at all\n                break;\n        }\n\n        return (`\n            <div class=\"tooltip\">\n                <p class=\"tooltipText\">\n                    Requested ${this.state.timeDiff} by ${this.props.metadata.username}\n                </p>\n                <div class=\"status ${statusClass}\" />\n            </div>`\n        );\n    }\n\n    toggleLock = () => {\n        this.props.toggleLock(this.props.gameName)\n    }\n\n    updateStatus = () => {\n        // return Date.now();\n        this.props.getActivity(this.props.metadata.username).then((activityStatus) => {\n            this.setState(() => {\n                return {\n                    ...this.state,\n                    timeDiff: this.getFormattedTimeDiff(this.props.metadata.time),\n                    activityStatus\n                };\n            });\n        })\n    }\n\n    render() {\n        const lockClassName = this.props.metadata.locked ? 'lock locked' : 'lock unlocked';\n        const cardStatus = this.props.metadata.chosen ? 'chosen' : 'pending';\n\n        return (\n            <div className=\"game-request-wrapper\">\n            \t<ReactTooltip effect=\"solid\" place=\"right\" />\n            \t<div id=\"baseDiv\"\n            \t\tclassName={`game-request ${cardStatus}`}\n            \t\tdata-tip={this.getTooltipContents()}\n            \t\tdata-html={true}\n            \t\tonMouseEnter={this.updateStatus}\n            \t>\n            \t\t<div className=\"game-request-body\">\n            \t\t    {this.props.gameName}\n            \t\t\t<div className=\"options\">\n            \t\t\t\t<img src={lock} alt=\"lock\" className={lockClassName} onClick={this.toggleLock} />\n            \t\t\t\t<button type='button' className=\"deleteButton\" onClick={this.deleteRequest}>X</button>\n            \t\t\t</div>\n            \t\t</div>\n            \t</div>\n            </div>\n        );\n    }\n}\n","export default __webpack_public_path__ + \"static/media/JackboxGames.39ad7cd1.yaml\";","import {Component} from 'react';\nimport YAML from 'yaml'\nimport rawJackboxGameList from './JackboxGames.yaml';\nconst fetch = require('node-fetch');\nconst tmi = require('tmi.js');\n\nconst GAME_REQUEST_COMMAND = \"!request\";\n\nexport default class MessageHandler extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            client: null,\n            validGames: []\n        };\n        this.isModOrBroadcaster = this.isModOrBroadcaster.bind(this);\n        this.checkForMiscCommands = this.checkForMiscCommands.bind(this);\n        this.findGame = this.findGame.bind(this);\n        this.checkForGameCommand = this.checkForGameCommand.bind(this);\n        this.onMessage = this.onMessage.bind(this);\n        this.sendMessage = this.sendMessage.bind(this);\n    }\n\n    componentDidMount(props) {\n        const client = new tmi.client({\n            identity: {\n                username: this.props.channel,\n                password: this.props.access_token\n            },\n            channels: [\n                this.props.channel\n            ]\n        });\n\n        client.on('message', this.onMessage);\n        client.connect();\n\n        fetch(rawJackboxGameList)\n            .then(r => r.text())\n            .then(text => {\n                this.setState((state) => {\n                    return {\n                        ...state,\n                        client,\n                        validGames: YAML.parse(text)\n                    };\n                });\n            })\n    }\n\n    isModOrBroadcaster = (username) => {\n        return (this.props.channel === username || this.props.modList.includes(username.toLowerCase()));\n    }\n\n    // returns true if a known command was found & responded to\n    checkForMiscCommands = (message, username) => {\n        //========= general =========\n        if (message.startsWith(\"!gamelist\") || message.startsWith(\"!gameslist\")) {\n            this.sendMessage(`/me @${username}, click here for a list of valid Jackbox games: ${process.env.REACT_APP_REDIRECT_URI_NOENCODE}/gamelist`);\n            return true;\n        }\n\n        if (message === \"!wheelcommands\") {\n            this.sendMessage(`/me @${username}, click here to read about all supported commands: https://github.com/asukii314/twitch-request-wheel/blob/master/src/Commands.yaml`);\n            return true;\n        }\n\n        if (message.startsWith(\"!whichpack\")) {\n            const requestedGame = message.replace(\"!whichpack\", \"\").trim();\n            if (requestedGame === \"\") {\n                this.sendMessage(`/me @${username}, please specify the game you would like to look up the party pack for: e.g. !whichpack TMP 2`);\n                return true;\n            }\n\n            const gameObj = this.findGame(requestedGame, username);\n            if (gameObj) {\n                this.sendMessage(`/me @${username}, ${gameObj.name} is a ${gameObj.partyPack} game.`);\n            }\n            return true;\n        }\n\n        //========= advance next game =========\n        if (message === \"!advancenextgame\" || message === \"!nextgamefwd\" || message === \"!nextgameforward\") {\n            if (!this.isModOrBroadcaster(username)) {\n                this.sendMessage(`/me @${username}, only channel moderators can use this command.`);\n                return true;\n            }\n            if (this.props.changeNextGameIdx(1)) {\n                if (this.props.upcomingGames.length > 0) {\n                    // console.log(this.props.upcomingGames)\n                    this.sendMessage(`/me @${username}, the next game has been changed to ${this.props.upcomingGames[0].name}.`);\n                } else {\n                    this.sendMessage(`/me @${username}, the next game has been marked as \"TBD\".`);\n                }\n            } else {\n                this.sendMessage(`/me @${username}, there are no more games in the queue to advance to!`);\n            }\n            return true;\n        }\n\n        //========= advance prev game =========\n        if (message === \"!nextgameback\" || message === \"!nextgamebackward\") {\n            if (!this.isModOrBroadcaster(username)) {\n                this.sendMessage(`/me @${username}, only channel moderators can use this command.`);\n                return true;\n            }\n            if (this.props.changeNextGameIdx(-1)) {\n                this.sendMessage(`/me @${username}, the next game has been changed to ${this.props.upcomingGames[0].name}.`);\n            } else {\n                this.sendMessage(`/me @${username}, there are no previous games in the queue to go back to!`);\n            }\n            return true;\n        }\n\n        //========= set next game =========\n        if (message.startsWith(\"!setnextgame\") || message.startsWith(\"!redeemgame\")) {\n            if (!this.isModOrBroadcaster(username)) {\n                this.sendMessage(`/me @${username}, only channel moderators can use the ${message.startsWith(\"!s\") ? \"!setNextGame\" : \"!redeemgame\"} command.`);\n                return true;\n            }\n\n            const requestedGame = message.replace(\"!setnextgame\", \"\").replace(\"!redeemgame\", \"\").trim();\n            if (requestedGame === \"\") {\n                this.sendMessage(`/me @${username}, please specify the game you would like to insert in the queue: for example, ${message.startsWith(\"!s\") ? \"!setNextGame\" : \"!redeemgame\"} TMP 2`);\n                return true;\n            }\n\n            const gameObj = this.findGame(requestedGame, username);\n            if (gameObj) {\n                const numGamesAhead = this.props.setNextGame(gameObj);\n                if (numGamesAhead === 0) {\n                    this.sendMessage(`/me @${username}, ${gameObj.name} has been inserted as the next game in the queue.`);\n                } else {\n                    this.sendMessage(`/me @${username}, ${gameObj.name} has been inserted in the queue following ${numGamesAhead} other manual game request${numGamesAhead > 1 ? 's' : ''}.`);\n                }\n\n            }\n            return true;\n        }\n\n        //========= player queue management =========\n        if (message === \"!caniplay\" || message === \"!new\") {\n            this.props?.caniplayHandler(username, {\n                sendConfirmationMsg: message !== \"!new\"\n            });\n            return true;\n        }\n\n        if (message.startsWith(\"!priorityseat\") || message.startsWith(\"!redeemseat\")) {\n            if (!this.isModOrBroadcaster(username)) {\n                this.sendMessage(`/me @${username}, only channel moderators can use this command.`);\n                return true;\n            }\n            const redeemingUser = message.replace(\"!priorityseat\", \"\").replace(\"!redeemseat\", \"\").replace(\"@\", \"\").trim();\n            if (redeemingUser === \"\") {\n                this.sendMessage(`/me @${username}, please specify the user who has redeemed a priority seat in the next game: for example, ${message.startsWith(\"!p\") ? \"!priorityseat\" : \"!redeemseat\"} @asukii314`);\n                return true;\n            }\n            this.props?.caniplayHandler(redeemingUser, {\n                sendConfirmationMsg: true,\n                isPrioritySeat: true\n            });\n            return true;\n        }\n\n        if (message === \"!leave\" || message === \"!murd\") {\n            this.props?.playerExitHandler(username);\n            return true;\n        }\n\n        if (message === \"!clear\") {\n            if (this.isModOrBroadcaster(username)) {\n                this.props?.clearQueueHandler();\n            }\n            return true;\n        }\n\n        if (message === \"!open\") {\n            if (this.isModOrBroadcaster(username)) {\n                this.props?.openQueueHandler();\n            }\n            return true;\n        }\n\n        if (message === \"!close\") {\n            if (this.isModOrBroadcaster(username)) {\n                this.props?.closeQueueHandler();\n            }\n            return true;\n        }\n\n        if (message === \"!startgame\") {\n            if (!this.isModOrBroadcaster(username)) {\n                this.sendMessage(`/me @${username}, only channel moderators can use this command.`);\n                return true;\n            }\n            if (this.props.startGame()) {\n                this.sendMessage(`/me @${username}, the game has been started.`);\n            } else {\n                this.sendMessage(`/me @${username}, the game was already started.`);\n            }\n            return true;\n        }\n\n        if (message.startsWith(\"!redeem\")) {\n            this.sendMessage(`/me @${username}, this command is no longer supported: please specify either !redeemgame or !redeemseat.`);\n            return true;\n        }\n        return;\n    }\n\n    findGame = (requestedGame, username) => {\n        for (let partyPackName in this.state.validGames) {\n            const partyPackObj = this.state.validGames[partyPackName]\n            for (const [formalGameName, metadata] of Object.entries(partyPackObj)) {\n                if (metadata?.Variants?.includes(requestedGame)) {\n                    return {\n                        name: formalGameName,\n                        longName: `${formalGameName} (${partyPackName})`,\n                        partyPack: partyPackName,\n                        ...metadata\n                    };\n                }\n            }\n        }\n        this.sendMessage(`/me @${username}, ${requestedGame} could not be found in the list of valid Jackbox games. Click here for a list of valid games: ${process.env.REACT_APP_REDIRECT_URI_NOENCODE}/gamelist`);\n        return;\n    }\n\n    checkForGameCommand = (message, username) => {\n        if (!message.startsWith(GAME_REQUEST_COMMAND)) return;\n\n        const requestedGame = message.replace(GAME_REQUEST_COMMAND, \"\").trim();\n\n        if (requestedGame === \"\") {\n            this.sendMessage(`/me @${username}, please specify the game you would like to request: for example, !request TMP 2`);\n            return null;\n        }\n\n        return this.findGame(requestedGame, username);\n    }\n\n    onMessage = (target, tags, msg, self) => {\n        if (self) return;\n        this.props.onMessage(msg, tags.username, tags)\n\n        if (msg.trim() === \"!nextgame\") {\n            if (this.props.upcomingGames && this.props.upcomingGames.length > 0) {\n                let upcoming = this.props.upcomingGames[0].name;\n                if (this.props.upcomingGames.length > 1) {\n                    upcoming += `, followed by ${this.props.upcomingGames[1].name}`\n                    for (let i = 2; i < this.props.upcomingGames.length; i++) {\n                        upcoming += ` and ${this.props.upcomingGames[i].name}`\n                    }\n                }\n                this.sendMessage(`/me @${tags.username}, the next game up is ${upcoming}!`)\n            } else {\n                this.sendMessage(`/me @${tags.username}, the next game hasn't been decided yet - feel free to !request one :)`)\n            }\n\n            return;\n        }\n\n        const cleanedMsg = msg.trim().toLowerCase();\n        if (this.checkForMiscCommands(cleanedMsg, tags.username)) return;\n        const gameObj = this.checkForGameCommand(cleanedMsg, tags.username);\n        if (!gameObj) return;\n\n        if (this.props.messages[gameObj.longName]) {\n            this.sendMessage(`/me @${tags.username}, ${gameObj.name} has already been requested!`);\n            return;\n        }\n\n        let prevRequestedGameName = null;\n        for (const metadata of Object.values(this.props.messages)) {\n            if (metadata.username === tags.username) {\n                prevRequestedGameName = metadata.longName;\n                break;\n            }\n        }\n\n        if (prevRequestedGameName) {\n            if (this.props.channel === tags.username) {\n                this.sendMessage(`/me @${tags.username}, ${gameObj.name} has been added to the request queue. Your previous game request(s) weren't deleted, since you have special broadcaster privilege :P`);\n            } else {\n                this.props.onDelete(prevRequestedGameName);\n                this.sendMessage(`/me @${tags.username}, your previous request of ${prevRequestedGameName} has been replaced with ${gameObj.name}.`);\n            }\n        } else {\n            this.sendMessage(`/me @${tags.username}, ${gameObj.name} has been added to the request queue.`);\n        }\n\n        this.props.addGameRequest(gameObj, tags.username);\n    }\n\n    sendMessage = (msg) => {\n        this.state.client.say(this.props.channel, msg)\n    }\n\n    render() {\n        return null;\n    }\n}\n","import { Component } from 'react';\n\nimport './Sidebar.css';\n\nexport default class Sidebar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            index: 0\n        }\n\n        this.getHistoryList = this.getHistoryList.bind(this);\n        this.getNextGameName = this.getNextGameName.bind(this);\n        this.getNextGamePartyPack = this.getNextGamePartyPack.bind(this);\n        this.hasNextGame = this.hasNextGame.bind(this);\n        this.moveNextGameBack = this.moveNextGameBack.bind(this);\n        this.moveNextGameFwd = this.moveNextGameFwd.bind(this);\n        this.printGame = this.printGame.bind(this);\n    }\n\n    getHistoryList = (history) => {\n        if (history.length === 0) {\n            return (\n                <li key='placeholder'>No games yet</li>\n            );\n        }\n        return history.map((playedGame, i) => (\n            <li key={i}>\n                {this.printGame(i)}\n            </li>\n        ));\n    }\n\n    getNextGameName = () => {\n        return this.hasNextGame()\n            ? this.props.history[this.props.nextGameIdx].name\n            : 'not yet decided';\n    }\n\n    getNextGamePartyPack = () => {\n        return this.hasNextGame()\n            ? this.props.history[this.props.nextGameIdx].partyPack\n            : null;\n    }\n\n    hasNextGame = () => {\n        return this.props.history.length > this.props.nextGameIdx;\n    }\n\n    moveNextGameFwd = () => {\n        return this.props.changeNextGameIdx(1);\n    }\n\n    moveNextGameBack = () => {\n        return this.props.changeNextGameIdx(-1);\n    }\n\n    printGame = (idx) => {\n        if (idx === this.props.nextGameIdx) {\n            return (\n                <b>{this.props.history[idx].name}</b>\n            );\n        }\n        return this.props.history[idx].name;\n    }\n\n    render() {\n        let nextGame = this.hasNextGame();\n\n        let buttonPlayerSelect;\n        switch (this.props.requestMode) {\n            case 'game':\n                buttonPlayerSelect = (\n                    <button className=\"open-seat-requests\" disabled={!nextGame} onClick={this.props.togglePlayerSelect}>\n                        OPEN SEAT REQUESTS\n                    </button>\n                )\n                break;\n            case 'seat':\n                buttonPlayerSelect = (\n                    <button className=\"return-to-wheel\" onClick={this.props.togglePlayerSelect}>\n                        RETURN TO WHEEL\n                    </button>\n                )\n                break;\n            default:\n                break;\n        }\n\n        return (\n            <div id=\"sidebar\" className={this.props.requestMode}>\n                <div className=\"sidebar-panel\">\n                    <div className=\"p sidebar-panel-up-next\"> Up Next:\n\n                        <p className=\"next-game-name\">\n                            {this.getNextGameName()}\n                        </p>\n\n                        <p className=\"next-game-party-pack\">\n                            <i>{this.getNextGamePartyPack()}</i>\n                        </p>\n\n                        {buttonPlayerSelect}\n                    </div>\n                </div>\n\n                <div className=\"nav-wrapper\">\n                    <button className=\"move-next-game-back\" onClick={this.moveNextGameBack}> &#8678; </button>\n                    <button className=\"move-next-game-fwd\" onClick={this.moveNextGameFwd}> &#8680; </button>\n                </div>\n\n                <div className=\"sidebar-panel\">\n                    <p className=\"sidebar-panel-history\"> History </p>\n                    <p className=\"sidebar-panel-history-list\">\n                        {this.getHistoryList(this.props.history)}\n                    </p>\n                </div>\n            </div>\n        );\n    }\n}\n","export default __webpack_public_path__ + \"static/media/dice.021a7158.svg\";","export default __webpack_public_path__ + \"static/media/star.de82f684.svg\";","import React, { Component } from 'react';\r\nimport './playerSelect.css';\r\nimport dice from './dice.svg';\r\nimport star from './star.svg';\r\n\r\nexport default class PlayerSelect extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.firstColumn = React.createRef();\r\n        this.state = {\r\n            interested: [],\r\n            playing: [],\r\n            joined: [],\r\n            streamerSeat: false,\r\n            isQueueOpen: true\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateColumnSizes();\r\n        window.addEventListener(\"resize\", this.updateColumnSizes);\r\n    }\r\n\r\n    updateColumnSizes = () => {\r\n        this.setState((state) => {\r\n            return {\r\n                ...state,\r\n                columnWidth: this.firstColumn.current.offsetWidth\r\n            };\r\n        })\r\n    }\r\n\r\n    handleNewPlayerRequest = (username, {isPrioritySeat=false}) => {\r\n        if (isPrioritySeat) {\r\n            // even if the queue is closed, still add them to the interested column for consideration\r\n            const column = (this.state.isQueueOpen ? 'playing' : 'interested');\r\n\r\n            return this.updateColumnForUser({username, isPrioritySeat}, column)\r\n                ? 'you have been successfully added to the lobby.'\r\n                : 'there was an error adding you to the lobby.';\r\n        }\r\n\r\n        if (this.state?.interested?.map((uObj) => uObj.username)?.includes(username)\r\n        || this.state?.playing?.map((uObj) => uObj.username)?.includes(username)\r\n        || this.state?.joined?.map((uObj) => uObj.username)?.includes(username)) {\r\n            return 'you are already in the lobby.';\r\n        }\r\n\r\n        if (!this.state.isQueueOpen) {\r\n            return 'the queue is currently closed; users have already been selected for this game.';\r\n        }\r\n        return this.updateColumnForUser({username}, 'interested')\r\n            ? 'you have successfully joined the lobby.'\r\n            : 'there was an error adding you to the lobby.';\r\n    }\r\n\r\n    updateColumnForUser = (userObj, newColumn) => {\r\n        if (!this.state || !this.state[newColumn]) return false;\r\n\r\n        this.removeUser(userObj.username);\r\n        this.setState((state) => {\r\n            return {\r\n                ...state,\r\n                [newColumn]: [\r\n                    ...state[newColumn],\r\n                    userObj\r\n                ]\r\n            }\r\n        });\r\n        return true;\r\n    }\r\n\r\n    removeUser = (username) => {\r\n        return this.setState((state) => {\r\n            return {\r\n                ...state,\r\n                interested: state.interested.filter((iObj) => iObj.username !== username),\r\n                playing: state.playing.filter((pObj) => pObj.username !== username),\r\n                joined:  state.joined.filter((jObj) => jObj.username !== username)\r\n            }\r\n        });\r\n    }\r\n\r\n    clearQueue = () => {\r\n        return this.setState((state) => {\r\n            return {\r\n                ...state,\r\n                interested: [],\r\n                playing: [],\r\n                joined: []\r\n            }\r\n        })\r\n    }\r\n\r\n    openQueue = () => {\r\n        return this.setState((state) => {\r\n            return {\r\n                ...state,\r\n                isQueueOpen: true\r\n            }\r\n        })\r\n    }\r\n\r\n    closeQueue = () => {\r\n        return this.setState((state) => {\r\n            return {\r\n                ...state,\r\n                isQueueOpen: false\r\n            }\r\n        })\r\n    }\r\n\r\n    playerCount = () => {\r\n        return this.state.playing.length + this.state.joined.length +\r\n                        (this.state.streamerSeat ? 1 : 0);\r\n    }\r\n\r\n    toggleStreamerSeat = () => {\r\n        this.setState((state) => {\r\n            return {\r\n                ...state,\r\n                streamerSeat: !state.streamerSeat\r\n            }\r\n        });\r\n    }\r\n\r\n    canStartGame = () => {\r\n        return this.props.game?.['Max players'] >= this.playerCount() &&\r\n                     this.props.game?.['Min players'] <= this.playerCount();\r\n    }\r\n\r\n    startGame = () => {\r\n        // clear for now; eventually, save elsewhere to report on user play history for that session\r\n        this.setState ((state) => {\r\n            return {\r\n                ...state,\r\n                interested: [],\r\n                playing: [],\r\n                joined: []\r\n            };\r\n        })\r\n        this.props.startGame();\r\n    }\r\n\r\n    randomizePlayers = () => {\r\n        const numPlayersToAdd = Math.min(\r\n            this.props.game['Max players'] - this.playerCount(),\r\n            this.state.interested.length\r\n        );\r\n\r\n        let randIdx, randUsername;\r\n        let randIdxArray = [], randUsernameArray = [];\r\n        // let interested = this.state.interested;\r\n        let playing = this.state.playing;\r\n\r\n        while(randIdxArray.length < numPlayersToAdd) {\r\n            randIdx = Math.floor(Math.random() * this.state.interested.length);\r\n            if (!randIdxArray.includes(randIdx)) {\r\n                randIdxArray.push(randIdx);\r\n                randUsername = this.state.interested[randIdx].username;\r\n                randUsernameArray.push(randUsername);\r\n                playing = [\r\n                    ...playing,\r\n                    this.state.interested[randIdx]\r\n                ];\r\n            }\r\n        }\r\n        this.setState((state) => {\r\n            return {\r\n                ...state,\r\n                interested: state.interested.filter((uObj) => !randUsernameArray.includes(uObj.username)),\r\n                playing\r\n            }\r\n        })\r\n    }\r\n\r\n    renderPlayerCard = (userObj, id, curColumn) => {\r\n        return (\r\n            <div key={id} className='playerCard'>\r\n                <div className=\"playerCard-username\">\r\n                    {userObj.isPrioritySeat === true && <img src={star} alt=\"Priority seat redemption\"/>}\r\n                    <p className='playerName' style={{maxWidth: this.state.columnWidth - 25}}>{userObj.username}</p>\r\n                </div>\r\n                <div className='changeColButtonsContainer'>\r\n                    {curColumn !== 'interested' && <button className='changeCol' onClick={this.updateColumnForUser.bind(this, userObj, 'interested')}>Interested</button>}\r\n                    {curColumn !== 'playing' && <button className='changeCol' onClick={this.updateColumnForUser.bind(this, userObj, 'playing')}>Playing</button>}\r\n                    {/*curColumn !== 'joined' && <button className='changeCol' onClick={this.updateColumnForUser.bind(this, userObj, 'joined')}>Joined</button>*/}\r\n                    <button className='changeCol' onClick={this.removeUser.bind(this, userObj.username)}>X</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderStreamerSeatToggle = () => {\r\n        return (\r\n            <div className='my-toggle-group'>\r\n                <p className='toggle-label'>\r\n                    Reserve seat for streamer?\r\n                </p>\r\n                <div className='my-toggle'>\r\n                    <input type=\"checkbox\" defaultChecked={true} onChange={this.toggleStreamerSeat}/>\r\n                    <div className='my-toggle-text no' aria-hidden=\"true\">No</div>\r\n                    <div className='my-toggle-text yes' aria-hidden=\"true\">Yes</div>\r\n                    <div className='my-toggle-orb'></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderPlayerCount = () => {\r\n        let className = 'playerCount';\r\n        if (this.props.game?.['Max players'] < this.playerCount()) {\r\n            className += ' overlimit';\r\n        }\r\n        return (\r\n            <p className={className}>\r\n                {this.playerCount()} of {this.props.game?.['Max players']} seats claimed\r\n            </p>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let startGameClass = 'startGame';\r\n        if (this.playerCount() < this.props.game?.['Min players']){\r\n            startGameClass += ' disabled';\r\n        }\r\n\r\n        return (\r\n            <div className='playerSelectContainer'>\r\n                <div className=\"header\">\r\n                    {this.renderStreamerSeatToggle()}\r\n                    <div className=\"game-name\">\r\n                        <b>{this.props.game?.name ?? \"TBD\"}</b>\r\n                        {this.renderPlayerCount()}\r\n                    </div>\r\n                    <button className={startGameClass} onClick={this.startGame} disabled={!this.canStartGame()}>Start Game</button>\r\n                </div>\r\n                <div className='playerCardContainer'>\r\n                    <div ref={this.firstColumn} className='playerCardColumn interested'>\r\n                        <p className=\"playerCardColumn-header\">Interested</p>\r\n                        {this.state.interested.filter((iObj) => iObj.isPrioritySeat).map((userObj, i) => this.renderPlayerCard(userObj, i, 'interested') )}\r\n                        {this.state.interested.filter((iObj) => !iObj.isPrioritySeat).map((userObj, i) => this.renderPlayerCard(userObj, i, 'interested') )}\r\n                    </div>\r\n\r\n                    <div className='playerCardColumn playing'>\r\n                        <p className=\"playerCardColumn-header\">Playing\r\n                        <button className=\"dice\" onClick={this.randomizePlayers}>\r\n                            <img src={dice} alt=\"dice icon\"/>\r\n                        </button>\r\n                        </p>\r\n                        {this.state.playing.filter((iObj) => iObj.isPrioritySeat).map((userObj, i) => this.renderPlayerCard(userObj, i, 'playing') )}\r\n                        {this.state.playing.filter((iObj) => !iObj.isPrioritySeat).map((userObj, i) => this.renderPlayerCard(userObj, i, 'playing') )}\r\n                    </div>\r\n\r\n                    {/*<div className='playerCardColumn joined'>\r\n                        <p className=\"playerCardColumn-header\">Joined</p>\r\n                        {this.state.joined.filter((iObj) => iObj.isPrioritySeat).map((userObj, i) => this.renderPlayerCard(userObj, i, 'joined') )}\r\n                        {this.state.joined.filter((iObj) => !iObj.isPrioritySeat).map((userObj, i) => this.renderPlayerCard(userObj, i, 'joined') )}\r\n                    </div>*/}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { Component } from 'react';\nimport WheelComponent from 'react-wheel-of-prizes'\nimport GameRequest from './GameRequest'\nimport MessageHandler from './MessageHandler';\nimport Sidebar from './Sidebar'\nimport PlayerSelect from './PlayerSelect';\nimport ChatActivity, { ActivityStatus } from './ChatActivity';\n\nimport './MainScreen.css';\nconst randomColor = require('randomcolor');\n\n\nexport default class MainScreen extends Component {\n    constructor(props){\n        super(props);\n        this.chatActivity = new ChatActivity(this.props.channel)\n        this.state = {\n            messages: {},\n            colors: randomColor({count: 99, luminosity: 'light', hue: 'blue'}),\n            counter: 0,\n            history: [],\n            nextGameIdx: 0,\n            showPlayerSelect: false\n        };\n\n        this.playerSelector = null;\n        this.messageHandler = null;\n\n        this.changeNextGameIdx = this.changeNextGameIdx.bind(this);\n        this.moveNextGameFwd = this.moveNextGameFwd.bind(this);\n        this.moveNextGameBack = this.moveNextGameBack.bind(this);\n        this.addGameRequest = this.addGameRequest.bind(this);\n        this.toggleLock = this.toggleLock.bind(this);\n        this.setNextGame = this.setNextGame.bind(this);\n        this.addGameToQueue = this.addGameToQueue.bind(this);\n        this.onWheelSpun = this.onWheelSpun.bind(this);\n        this.removeGame = this.removeGame.bind(this);\n        this.onMessage = this.onMessage.bind(this);\n        this.togglePlayerSelect = this.togglePlayerSelect.bind(this);\n        this.routePlayRequest = this.routePlayRequest.bind(this);\n        this.routeLeaveRequest = this.routeLeaveRequest.bind(this);\n        this.routeOpenQueueRequest = this.routeOpenQueueRequest.bind(this);\n        this.routeCloseQueueRequest = this.routeCloseQueueRequest.bind(this);\n        this.routeClearQueueRequest = this.routeClearQueueRequest.bind(this);\n        this.startGame = this.startGame.bind(this);\n        this.setMessageHandlerRef = this.setMessageHandlerRef.bind(this);\n        this.setPlayerSelectRef = this.setPlayerSelectRef.bind(this);\n    }\n\n    changeNextGameIdx = (delta = 1) => {\n        if (this.state.nextGameIdx + delta > this.state.history.length) return false;\n        if (this.state.nextGameIdx + delta < 0) return false;\n        this.setState((state) => {\n            return {\n                ...this.state,\n                nextGameIdx: state.nextGameIdx + delta\n            }\n        });\n        return true;\n    }\n\n    moveNextGameFwd = () => {\n        return this.changeNextGameIdx();\n    }\n\n    moveNextGameBack = () => {\n        return this.changeNextGameIdx(-1);\n    }\n\n    addGameRequest = (gameObj, user) => {\n        this.setState((state) => {\n            return {\n                ...state,\n                messages: {\n                    ...this.state.messages,\n                    [gameObj.longName]: {\n                        ...gameObj,\n                        username: user,\n                        time: Date.now(),\n                        locked: false,\n                        chosen: false\n                    }\n                },\n                counter: this.state.counter + 1\n            };\n        })\n    }\n\n    toggleLock = (game) => {\n        const stateCopy = {...this.state.messages[game]};\n        stateCopy.locked = !stateCopy.locked\n\n        this.setState(() => {\n            return {\n                ...this.state,\n                messages: {\n                    ...this.state.messages,\n                    [game]: stateCopy\n                }\n            }\n        });\n    }\n\n    // @return: the number of games ahead of this one, after successfully inserting in queue\n    // (i.e. if it's the very next game, return 0; if there's one ahead, return 1; etc)\n    setNextGame = (gameObj) => {\n        let idx = this.state.nextGameIdx;\n\n        // insert next game at next up position by default, but\n        //      *after* any other manually inserted games\n        while (idx < this.state.history.length && this.state.history[idx]?.override) {\n            idx++;\n        }\n\n        this.setState((state) => {\n            return {\n                ...state,\n                history: [\n                    ...state.history.slice(0, Math.max(0, idx)),\n                    {\n                        ...gameObj,\n                        override: true\n                    },\n                    ...state.history.slice(idx)\n                ]\n            }\n        });\n\n        return idx - this.state.nextGameIdx;\n    }\n\n    addGameToQueue = (gameObj) => {\n        // update history + game card highlight color\n        this.setState((state) => {\n            return {\n                ...state,\n                history: [\n                    ...this.state.history,\n                    {\n                        ...gameObj,\n                        override: false\n                    }\n                ],\n                messages: {\n                    ...state.messages,\n                    [gameObj.longName]: {\n                        ...state.messages[gameObj.longName],\n                        chosen: true\n                    }\n                }\n            }\n        })\n    }\n\n    onWheelSpun = (gameLongName) => {\n        const gameRequestObj = this.state.messages?.[gameLongName];\n        if (!gameRequestObj) return;\n\n        // send confirmation message in chat\n        const requester = gameRequestObj.username;\n\n        this.addGameToQueue(gameRequestObj);\n\n        // remove card unless it's locked\n        if (!this.state.messages[gameLongName].locked) {\n            setTimeout(() => {\n                this.removeGame(gameLongName);\n            }, 2500);\n        }\n\n        return this.chatActivity.getStatusPromise(requester).then((status) => {\n            let msg = \"\";\n            switch(status) {\n                case ActivityStatus.DISCONNECTED:\n                    msg = `/me ${gameRequestObj.name} just won the spin, but it doesn't seem like @${requester} is still around. Hope someone else wants to play!`\n                    break;\n\n                case ActivityStatus.ACTIVE:\n                    msg = `/me @${requester}, good news - ${gameRequestObj.name} just won the spin!`;\n                    break;\n\n                case ActivityStatus.IDLE:\n                default:\n                    msg = `/me @${requester}, good news - ${gameRequestObj.name} just won the spin! (I hope you're still around!)`;\n            }\n            return this.messageHandler.sendMessage(msg);\n        })\n\n    }\n\n    removeGame = (gameLongName) => {\n        const newMessageObj = {...this.state.messages};\n        delete newMessageObj[gameLongName];\n        this.setState((state) => {\n            return {\n                ...state,\n                messages: newMessageObj,\n                counter: this.state.counter + 1\n            };\n        })\n    }\n\n    onMessage = (message, user, metadata) => {\n        this.chatActivity.updateLastMessageTime(user);\n    }\n\n    togglePlayerSelect = () => {\n        this.setState((state) => {\n            return {\n                ...state,\n                showPlayerSelect: !state.showPlayerSelect\n            }\n        })\n    }\n\n    routePlayRequest = (user, {sendConfirmationMsg = true, isPrioritySeat = false}) => {\n        const msg = this.state.showPlayerSelect\n            ? this.playerSelector?.handleNewPlayerRequest(user, {isPrioritySeat})\n            : 'sign-ups are currently closed; try again after this game wraps up!'\n\n        if (sendConfirmationMsg) {\n            this.messageHandler?.sendMessage(`/me @${user}, ${msg}`);\n        }\n    }\n\n    routeLeaveRequest = (user) => {\n        this.playerSelector?.removeUser(user);\n    }\n\n    routeOpenQueueRequest = () => {\n        this.setState((state) => {\n            return {\n                ...state,\n                showPlayerSelect: true\n            }\n        })\n        this.playerSelector?.openQueue();\n    }\n\n    routeCloseQueueRequest = () => {\n        this.playerSelector?.closeQueue();\n    }\n\n    routeClearQueueRequest = () => {\n        this.playerSelector?.clearQueue();\n    }\n\n    startGame = () => {\n        // I know this is a big ol' React sin, but I can't for the life of me\n        //   figure out why this.togglePlayerSelect() isn't working... sooo...\n        if (this.state.showPlayerSelect) {\n            this.state.showPlayerSelect = false;\n            this.moveNextGameFwd();\n            return true;\n        }\n        return false;\n    }\n\n    setMessageHandlerRef = (ps) => {\n        this.messageHandler = ps;\n    };\n\n    setPlayerSelectRef = (mh) => {\n        this.playerSelector = mh;\n    };\n\n    render() {\n        const gameRequestArray = Object.keys(this.state.messages);\n\n        let logOutBtn;\n        if (typeof this.props.onLogout === 'function') {\n            logOutBtn = (\n                <button className=\"logout\" onClick={this.props.onLogout}>Logout &#10151;</button>\n            );\n        }\n\n        let mainClassName = this.state.showPlayerSelect ? 'player-select' : 'game-select';\n\n        let subheading = this.state.showPlayerSelect ? (\n            <span className=\"subheading-player\">\n                Type <b>!new</b> in {this.props.channel}'s chat if you want to join the next game\n            </span>\n        ) : (\n            <span className=\"subheading-game\">\n                Type e.g. <b>\"!request Blather Round\"</b> in {this.props.channel}'s chat to add\n            </span>\n        );\n\n        let innerContent;\n        let rightColumn;\n\n        if (this.state.showPlayerSelect) {\n            innerContent = (\n                <PlayerSelect\n                    game={this.state.history?.[this.state.nextGameIdx]}\n                    startGame={this.startGame}\n                    ref={this.setPlayerSelectRef}\n                />\n            );\n        } else {\n            innerContent = gameRequestArray.map((gameName, i) =>\n                <GameRequest\n                    key={i}\n                    gameName={gameName}\n                    metadata={this.state.messages[gameName]}\n                    onDelete={this.removeGame}\n                    toggleLock={this.toggleLock.bind(gameName)}\n                    getActivity={this.chatActivity.getStatusPromise}\n                />\n            );\n            rightColumn = (\n                <div className=\"right-column\" width=\"50px\">\n                    <div className=\"wheel-wrapper\">\n                         <WheelComponent\n                            key={this.state.counter}\n                            segments={gameRequestArray}\n                            segColors={this.state.colors}\n                            onFinished={this.onWheelSpun}\n                            isOnlyOnce={false}\n                            size={250}\n                            upDuration={100}\n                            downDuration={1000}\n                            primaryColor={\"white\"}\n                            contrastColor={\"black\"}\n                            fontFamily={\"Arial\"}\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n\n        return (\n            <div id=\"main-screen\" className={mainClassName}>\n                <MessageHandler\n                    addGameRequest={this.addGameRequest}\n                    setNextGame={this.setNextGame}\n                    changeNextGameIdx={this.changeNextGameIdx}\n                    startGame={this.startGame}\n                    messages={this.state.messages}\n                    channel={this.props.channel}\n                    modList={this.props.modList}\n                    access_token={this.props.access_token}\n                    onMessage={this.onMessage}\n                    onDelete={this.removeGame}\n                    upcomingGames={this.state.history.slice(this.state.nextGameIdx)}\n                    caniplayHandler={this.routePlayRequest}\n                    playerExitHandler={this.routeLeaveRequest}\n                    openQueueHandler={this.routeOpenQueueRequest}\n                    closeQueueHandler={this.routeCloseQueueRequest}\n                    clearQueueHandler={this.routeClearQueueRequest}\n                    ref={this.setMessageHandlerRef}\n                />\n                <div className=\"left-column\">\n                    <h2>{this.state.showPlayerSelect ? 'Seat Requests' : 'Game Requests'}</h2>\n                    <h4>{subheading}</h4>\n                    <div className=\"left-column-body\">\n                        <Sidebar\n                            history={this.state.history}\n                            nextGameIdx={this.state.nextGameIdx}\n                            changeNextGameIdx={this.changeNextGameIdx}\n                            moveNextGameFwd={this.moveNextGameFwd}\n                            moveNextGameBack={this.moveNextGameBack}\n                            togglePlayerSelect={this.togglePlayerSelect}\n                            requestMode={this.state.showPlayerSelect ? 'seat' : 'game'}\n                        />\n                        <div className=\"left-column-inner-body\">\n                            {innerContent}\n                        </div>\n                    </div>\n                </div>\n                {rightColumn}\n                {logOutBtn}\n            </div>\n        )\n    }\n}\n","import React, {Component} from 'react';\nimport MainScreen from './MainScreen';\nimport {Redirect, withRouter} from \"react-router-dom\";\nimport queryString from 'query-string'\nconst fetch = require('node-fetch');\n\nclass AuthenticatedApp extends Component {\n    constructor() {\n        super();\n        this.state = {\n            username: localStorage.getItem('__username'),\n            access_token: localStorage.getItem('__access_token'),\n            failed_login: false\n        }\n        this.getAuth = this.getAuth.bind(this);\n        this.logOut = this.logOut.bind(this);\n    }\n    componentDidMount() {\n        this._isMounted = true;\n        if (!this.state.access_token) {\n            return this.getAuth();\n        }\n        return fetch('https://api.twitch.tv/helix/users', {\n            headers: {\n                'Client-ID': process.env.REACT_APP_TWITCH_CLIENT_ID,\n                Authorization: `Bearer ${this.state.access_token}`\n            }\n        })\n        .then(r => r.json())\n        .then(userInfo => {\n            //console.log(userInfo); login [aka lowercase username?], display_name, profile_image_url, description\n            localStorage.setItem('__username', userInfo.data[0].login);\n            return fetch(`https://api.twitch.tv/helix/moderation/moderators?broadcaster_id=${userInfo.data[0].id}`, {\n                headers: {\n                    'Client-ID': process.env.REACT_APP_TWITCH_CLIENT_ID,\n                    Authorization: `Bearer ${this.state.access_token}`\n                }\n            })\n            .then(r => r.json())\n            .then(modInfo => {\n                const modList = (!modInfo.data)\n                    ? null\n                    : modInfo.data.map((modObj) => modObj.user_name.toLowerCase());\n\n                if (this._isMounted) {\n                    this.setState((state) => {\n                        return {\n                            ...state,\n                            username: userInfo.data[0].login,\n                            modList\n                        };\n                    });\n                }\n            });\n        })\n        .catch(e => this.getAuth);\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    logOut() {\n        localStorage.removeItem('__username');\n        localStorage.removeItem('__access_token');\n\n        const requestParams = new URLSearchParams({\n            client_id: process.env.REACT_APP_TWITCH_CLIENT_ID,\n            token: this.state.access_token,\n            redirect_uri: process.env.REACT_APP_REDIRECT_URI_NOENCODE\n        });\n\n        fetch(`https://id.twitch.tv/oauth2/revoke?${requestParams}`, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/vnd.twitchtv.v5+json'\n            }\n        }).then(() => {\n            window.location.reload();\n        });\n    }\n\n    async getAuth(e) {\n        if (e) {\n            console.error(e);\n        }\n        localStorage.removeItem('__username');\n        localStorage.removeItem('__access_token');\n\n        const queryParams = queryString.parse(this.props.location.search);\n        const requestParams = new URLSearchParams({\n            grant_type: 'authorization_code',\n            code: queryParams.code,\n            client_id: process.env.REACT_APP_TWITCH_CLIENT_ID,\n            client_secret: process.env.REACT_APP_TWITCH_CLIENT_SECRET,\n            redirect_uri: process.env.REACT_APP_REDIRECT_URI_NOENCODE\n        });\n        await fetch(`https://id.twitch.tv/oauth2/token?${requestParams}`, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/vnd.twitchtv.v5+json'\n            }\n        })\n        .then(r => r.json())\n        .then((oauth) => {\n            //console.log(oauth);  access_token, refresh_token, expires_in, scope ['...']\n            if (!oauth.access_token) {\n                if (this._isMounted) {\n                    this.setState((state) => {\n                        return {\n                            ...state,\n                            failed_login: true\n                        };\n                    });\n                }\n                return;\n            }\n\n            localStorage.setItem('__access_token', oauth.access_token);\n            if (this._isMounted) {\n                this.setState((state) => {\n                    return {\n                        ...state,\n                        access_token: oauth.access_token\n                    };\n                });\n            }\n\n            return fetch('https://api.twitch.tv/helix/users', {\n                headers: {\n                    'Client-ID': process.env.REACT_APP_TWITCH_CLIENT_ID,\n                    Authorization: `Bearer ${oauth.access_token}`\n                }\n            })\n            .then(r => r.json())\n            .then(userInfo => {\n                //console.log(userInfo); login [aka lowercase username?], display_name, profile_image_url, description\n                localStorage.setItem('__username', userInfo.data[0].login);\n                return fetch(`https://api.twitch.tv/helix/moderation/moderators?broadcaster_id=${userInfo.data[0].id}`, {\n                    headers: {\n                        'Client-ID': process.env.REACT_APP_TWITCH_CLIENT_ID,\n                        Authorization: `Bearer ${this.state.access_token}`\n                    }\n                })\n                .then(r => r.json())\n                .then(modInfo => {\n                    const modList = (!modInfo.data)\n                        ? null\n                        : modInfo.data.map((modObj) => modObj.user_name.toLowerCase());\n                    if (this._isMounted) {\n                        this.setState((state) => {\n                            return {\n                                ...state,\n                                username: userInfo.data[0].login,\n                                modList\n                            };\n                        });\n                    }\n                    return;\n                });\n            });\n        });\n    }\n\n    render() {\n        if (this.state.failed_login) {\n            return (<Redirect to=\"/login\"/>);\n        }\n        let mainContent;\n        if (this.state.username) {\n            mainContent = (\n                <MainScreen\n                    channel={this.state.username}\n                    modList={this.state.modList}\n                    access_token={this.state.access_token}\n                    onLogout={this.logOut}\n                />\n            );\n        }\n\n        return (\n            <div id=\"authenticated-app\">\n                {mainContent}\n            </div>\n        );\n    }\n}\n\nexport {AuthenticatedApp};\n\nexport default withRouter(AuthenticatedApp);\n","import { Component } from 'react';\nimport YAML from 'yaml'\nimport rawJackboxGameList from './JackboxGames.yaml';\nimport './JackboxGameList.css';\nconst fetch = require('node-fetch');\n\nconst PartyPackCard = function (props) {\n  const gameList = Object.keys(props.metadata);\n  return (\n    <div className=\"partyPackCard\">\n      <p className=\"partyPackName\">{props.partyPackName} </p>\n      {gameList.map((gameName, i) =>\n        <GameCard\n          key={i}\n          gameName={gameName}\n          possibleMatches={props.metadata?.[gameName]?.Variants}\n        />\n      )}\n    </div>\n  );\n}\n\n\n// <p> {props.gameName} <p>\n\nconst GameCard = function(props) {\n  return (\n    <div>\n      <p className=\"gameName\">{props.gameName} </p>\n      {props.possibleMatches.map((possibleMatch, i) =>\n        <li className=\"possibleGameMatch\" key={`${props.gameName}-${i}`}>!request {possibleMatch}</li>\n      )}\n    </div>\n  );\n}\n\nexport default class JackboxGameList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      validGames: []\n    };\n  }\n\n  componentDidMount(props) {\n    fetch(rawJackboxGameList)\n      .then(r => r.text())\n      .then(text => {\n        this.setState((state) => {\n          return {\n            ...state,\n            validGames: YAML.parse(text)\n          };\n        });\n      })\n    }\n\n\n\n    render() {\n      const partyPackList = Object.keys(this.state.validGames);\n      return (\n        <div className=\"partyPackList\">\n          {partyPackList.map((partyPackName, i) =>\n            <PartyPackCard\n              key={i}\n              partyPackName={partyPackName}\n              metadata={this.state.validGames[partyPackName]}\n            />\n          )}\n        </div>\n      );\n    }\n\n}\n","import AuthenticatedApp from './AuthenticatedApp';\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\nimport JackboxGameList from './JackboxGameList';\nimport React, {Component} from 'react';\nimport {version} from '../package.json';\n\nimport './App.css';\n\nconst loginScreen = function() {\n    const scopes = 'chat:read chat:edit moderation:read';\n    const loginUrl = 'https://id.twitch.tv/oauth2/authorize'\n        + `?client_id=${process.env.REACT_APP_TWITCH_CLIENT_ID}`\n        + `&response_type=code&scope=${scopes}`\n        + `&redirect_uri=${process.env.REACT_APP_REDIRECT_URI}`;\n\n    return (\n        <div id=\"login-screen\">\n            <a href={loginUrl}>\n                Log In With <strong>Twitch</strong>\n            </a>\n            <br/>\n            <small>\n                {`v${version}`}\n            </small>\n        </div>\n    );\n}\n\nclass App extends Component {\n    render() {\n\n        return (\n            <HashRouter basename='/'>\n                <div className=\"App\">\n                    <header className=\"App-header\">\n                        <Switch>\n                            <Route exact path=\"/login\">\n                                {loginScreen()}\n                            </Route>\n                            <Route exact path=\"/gamelist\" component={JackboxGameList}/>\n                            <Route path=\"/\" component={AuthenticatedApp}/>\n                        </Switch>\n                    </header>\n                </div>\n            </HashRouter>\n        );\n    }\n}\n\nexport default App;\n\nexport {\n    loginScreen as LoginScreen\n};\n","import { ReportHandler } from 'web-vitals';\nimport { getCLS, getFID, getFCP, getLCP, getTTFB } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    getCLS(onPerfEntry);\n    getFID(onPerfEntry);\n    getFCP(onPerfEntry);\n    getLCP(onPerfEntry);\n    getTTFB(onPerfEntry);\n  }\n};\n\nexport default reportWebVitals;\n","import App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport React from 'react';\nimport {render} from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nrender(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}