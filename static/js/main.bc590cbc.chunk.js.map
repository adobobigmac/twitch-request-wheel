{"version":3,"sources":["ChatActivity.js","lock.svg","GameRequest.js","JackboxGames.yaml","MessageHandler.js","Sidebar.js","MainScreen.js","AuthenticatedApp.js","JackboxGameList.js","App.js","reportWebVitals.js","index.js"],"names":["fetch","require","ActivityStatus","ChatActivity","channel","updateLastMessageTime","user","lastMessageTimes","Date","now","minsSinceLastChatMessage","Math","floor","getChatters","then","r","json","res","chatters","moderators","viewers","staff","admins","global_mods","catch","e","this","getStatusPromise","bind","a","includes","GameRequest","props","getFormattedTimeDiff","timestamp","unit","timeDiff","updateStatus","getActivity","metadata","username","activityStatus","setState","state","time","delete","onDelete","msg","toggleLock","getTooltipContents","statusClass","lockOpacity","locked","cardStatus","chosen","effect","place","id","className","data-tip","data-html","onMouseEnter","style","margin","padding","fontSize","display","justifyContent","alignItems","src","lock","alt","width","opacity","paddingRight","onClick","type","Component","tmi","GAME_REQUEST_COMMAND","MessageHandler","checkForGameCommand","message","sendMessage","process","startsWith","requestedGame","replace","trim","partyPackName","validGames","partyPack","Object","entries","formalGameName","onMessage","target","tags","self","game","toLowerCase","messages","prevGame","addGame","console","log","upcomingGames","length","upcoming","i","client","say","identity","password","access_token","channels","on","connect","rawJackboxGameList","text","YAML","parse","Sidebar","printGame","idx","nextGameIdx","color","history","index","marginLeft","textTransform","backgroundColor","borderRadius","marginTop","marginBottom","fontWeight","height","moveNextGameBack","marginRight","moveNextGameFwd","map","playedGame","randomColor","MainScreen","counter","stateCopy","onGameChosen","keys","requester","chatActivity","status","messageHandler","setTimeout","removeGame","newMessageObj","colors","count","luminosity","hue","logOutBtn","gameArray","onLogout","position","top","right","paddingBottom","paddingTop","slice","ref","mh","flexGrow","overflow","segments","segColors","onFinished","isOnlyOnce","size","upDuration","downDuration","primaryColor","contrastColor","AuthenticatedApp","localStorage","getItem","failed_login","getAuth","logOut","headers","Authorization","userInfo","setItem","data","login","removeItem","URLSearchParams","client_id","token","redirect_uri","method","Accept","window","location","reload","error","queryParams","queryString","search","grant_type","code","client_secret","oauth","pathname","to","withRouter","PartyPackCard","gameList","gameName","possibleMatches","GameCard","possibleMatch","JackboxGameList","partyPackList","loginScreen","loginUrl","href","App","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc590cbc.chunk.js","sourcesContent":["const fetch = require('node-fetch');\n\nexport const ActivityStatus = {\n  ACTIVE: 1,\n  IDLE: 2,\n  DISCONNECTED: 3\n};\n\nconst MAX_IDLE_TIME_MINUTES = 10;\n\nexport default class ChatActivity {\n  constructor(channel) {\n    this.channel = channel;\n    this.lastMessageTimes = {};\n    this.getStatusPromise = this.getStatusPromise.bind(this);\n  }\n\n  updateLastMessageTime = (user) => {\n    this.lastMessageTimes = {\n      ...this.lastMessageTimes,\n      [user]: Date.now()\n    };\n  }\n\n  minsSinceLastChatMessage = (user) => {\n    return Math.floor((Date.now()-this.lastMessageTimes[user])/60000);\n  }\n\n  // returns a PROMISE, don't just assign the value again like a dweeb. :/\n  //\n  // not just active chatters - anyone with an active connnection to twitch chat.\n  // (thank the lord almighty for free open proxy sites. CORB is annoying.)\n  // note that results are fairly heavily cached, and the API may break\n  // eventually (is undocumented), but this is what twitch themselves\n  // uses to display the list of people connected to chat - best we got.\n  getChatters = () => {\n    return fetch(`https://thingproxy.freeboard.io/fetch/https://tmi.twitch.tv/group/user/${this.channel}/chatters`)\n      .then(r => r.json())\n      .then(res => {\n        if(!res || !res.chatters) return null;\n        return [\n          ...res.chatters.moderators,\n          ...res.chatters.viewers,\n          ...res.chatters.staff,\n          ...res.chatters.admins,\n          ...res.chatters.global_mods\n        ];\n      })\n      .catch((e) => {\n        // don't normally like swallowing errors like this,\n        // but it's a noncritical feature built off an\n        // undocumented api, sooo....\n        return null;\n      })\n  }\n\n  async getStatusPromise(user) {\n    // broadcaster always counts as active\n    if(user === this.channel) {\n      return ActivityStatus.ACTIVE;\n    }\n\n    // sent a chat message in the last X mins?\n    if(this.lastMessageTimes[user] && this.minsSinceLastChatMessage(user) < MAX_IDLE_TIME_MINUTES) {\n      return ActivityStatus.ACTIVE;\n    }\n\n    return this.getChatters().then((chatters) =>\n      !chatters || !chatters.includes(user)\n          ? ActivityStatus.DISCONNECTED\n          : ActivityStatus.IDLE\n    );\n  }\n\n}\n","export default __webpack_public_path__ + \"static/media/lock.6857c469.svg\";","import { Component } from 'react';\nimport ReactTooltip from 'react-tooltip'\nimport { ActivityStatus } from './ChatActivity';\nimport './messageStyles.css';\nimport lock from './lock.svg';\n\nexport default class GameRequest extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      timeDiff: 0,\n      activityStatus: null\n    };\n  }\n\n  getFormattedTimeDiff = (timestamp) => {\n    let unit = \"minute\";\n    let timeDiff = Math.floor((Date.now()-timestamp)/60000);\n    if(timeDiff === 0) {\n      return \"just now\";\n    }\n    if(timeDiff >= 60) {\n      unit = \"hour\";\n      timeDiff = Math.floor(timeDiff/60);\n\n      if(timeDiff >= 24) {\n        unit = \"day\";\n        timeDiff = Math.floor(timeDiff/24);\n      }\n    }\n    return `${timeDiff} ${unit}${timeDiff === 1 ? \"\" : \"s\"} ago`;\n  }\n\n  updateStatus = () => {\n    // return Date.now();\n    this.props.getActivity(this.props.metadata.username).then((activityStatus) => {\n      this.setState(() => {\n        return {\n          ...this.state,\n          timeDiff: this.getFormattedTimeDiff(this.props.metadata.time),\n          activityStatus\n        };\n      });\n    })\n  }\n  delete = (e) => {\n    this.props.onDelete(this.props.msg)\n  }\n\n  toggleLock = () => {\n    this.props.toggleLock(this.props.msg)\n  }\n\n  getTooltipContents = () => {\n    let statusClass = \"\";\n    switch(this.state.activityStatus) {\n      case ActivityStatus.ACTIVE:\n        statusClass = \"active\";\n        break;\n      case ActivityStatus.IDLE:\n        statusClass = \"idle\";\n        break;\n      case ActivityStatus.DISCONNECTED:\n        statusClass = \"disconnected\";\n        break;\n      default:\n        // no data back yet; don't show an activity status indicator at all\n        break;\n    }\n\n    return (`\n      <div class=\"tooltip\">\n        <p class=\"tooltipText\">Requested ${this.state.timeDiff} by ${this.props.metadata.username}</p>\n        <div class=\"status ${statusClass}\" />\n      </div>`);\n  }\n\n  render() {\n    const lockOpacity = this.props.metadata.locked ? '1' : '0.2';\n    const cardStatus = this.props.metadata.chosen ? 'chosen' : 'pending';\n    return (\n      <div>\n      <ReactTooltip effect=\"solid\" place=\"right\"/>\n      <div\n        id=\"baseDiv\"\n        className={cardStatus}\n        data-tip={this.getTooltipContents()}\n        data-html={true}\n        onMouseEnter={this.updateStatus}\n      >\n      <div style={{margin: '0px 15px 7px', padding: '4px', fontSize: '16px', display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>\n        {this.props.msg}\n        <div style={{display:'flex'}}>\n          <img src={lock} alt=\"lock\" style={{width: '16px', opacity: lockOpacity, paddingRight: '8px'}} className=\"lock\" onClick={this.toggleLock} />\n          <button type='button' className=\"deleteButton\" onClick={this.delete}>X</button>\n        </div>\n      </div>\n      </div>\n      </div>\n    );\n  }\n}\n","export default __webpack_public_path__ + \"static/media/JackboxGames.6e3cb11a.yaml\";","import { Component } from 'react';\r\nimport YAML from 'yaml'\r\nimport rawJackboxGameList from './JackboxGames.yaml';\r\nconst fetch = require('node-fetch');\r\nconst tmi = require('tmi.js');\r\n\r\nconst GAME_REQUEST_COMMAND = \"!request\";\r\n\r\nexport default class MessageHandler extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      client: null,\r\n      validGames: []\r\n    };\r\n  }\r\n\r\n  componentDidMount(props) {\r\n    const client = new tmi.client({\r\n      identity: {\r\n        username: this.props.channel,\r\n        password: this.props.access_token\r\n      },\r\n      channels: [\r\n        this.props.channel\r\n      ]\r\n    });\r\n\r\n    client.on('message', this.onMessage);\r\n    client.connect();\r\n\r\n    fetch(rawJackboxGameList)\r\n      .then(r => r.text())\r\n      .then(text => {\r\n        this.setState((state) => {\r\n          return {\r\n            ...state,\r\n            client,\r\n            validGames: YAML.parse(text)\r\n          };\r\n        });\r\n      })\r\n    }\r\n\r\n  checkForGameCommand = (message, username) => {\r\n    if(message === \"!gamelist\" || message === \"!gameslist\") {\r\n      this.sendMessage(`/me @${username}, click here for a list of valid Jackbox games: ${process.env.REACT_APP_REDIRECT_URI_NOENCODE}/gamelist`);\r\n    }\r\n    if(!message.startsWith(GAME_REQUEST_COMMAND)) return;\r\n\r\n    const requestedGame = message.replace(GAME_REQUEST_COMMAND, \"\").trim();\r\n\r\n    if(requestedGame === \"\") {\r\n      this.sendMessage(`/me @${username}, please specify the game you would like to request: for example, !request TMP 2`);\r\n      return null;\r\n    }\r\n\r\n    for(let partyPackName in this.state.validGames) {\r\n      const partyPack = this.state.validGames[partyPackName]\r\n      for(const [formalGameName, possibleMatches] of Object.entries(partyPack)){\r\n        if(possibleMatches.includes(requestedGame)) {\r\n          return `${formalGameName} (${partyPackName})`;\r\n        }\r\n      }\r\n    }\r\n    this.sendMessage(`/me @${username}, ${requestedGame} could not be found in the list of valid Jackbox games. Click here for a list of valid games: ${process.env.REACT_APP_REDIRECT_URI_NOENCODE}/gamelist`);\r\n    return null;\r\n  }\r\n\r\n  onMessage = (target, tags, msg, self) => {\r\n    if(self) return;\r\n    this.props.onMessage(msg, tags.username, tags)\r\n\r\n    if(msg.trim() === \"!nextgame\") {\r\n      console.log(this.props.upcomingGames)\r\n      if(this.props.upcomingGames && this.props.upcomingGames.length > 0) {\r\n        let upcoming = this.props.upcomingGames[0];\r\n        if(this.props.upcomingGames.length > 1) {\r\n          upcoming += `, followed by ${this.props.upcomingGames[1]}`\r\n          for(let i = 2; i < this.props.upcomingGames.length; i++) {\r\n            upcoming += ` and ${this.props.upcomingGames[i]}`\r\n          }\r\n        }\r\n        this.sendMessage(`/me @${tags.username}, unless someone requested a different one with channel points, the next game up is ${upcoming}!`)\r\n      } else {\r\n        this.sendMessage(`/me @${tags.username}, the next game hasn't been decided yet (unless someone requested one with channel points)!`)\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    const game = this.checkForGameCommand(msg.trim().toLowerCase(), tags.username);\r\n    if (!game) return;\r\n\r\n    if(this.props.messages[game]) {\r\n      this.sendMessage(`/me @${tags.username}, ${game} has already been requested!`);\r\n      return;\r\n    }\r\n\r\n    let prevGame = null;\r\n    for(const [game, metadata] of Object.entries(this.props.messages)) {\r\n      if(metadata.username === tags.username){\r\n        prevGame = game;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if(prevGame) {\r\n      if(this.props.channel === tags.username) {\r\n        this.sendMessage(`/me @${tags.username}, ${game} has been added to the request queue. Your previous game request(s) weren't deleted, since you have special broadcaster privilege :P`);\r\n      } else {\r\n        this.props.onDelete(prevGame);\r\n        this.sendMessage(`/me @${tags.username}, your previous request of ${prevGame} has been replaced with ${game}.`);\r\n      }\r\n    } else {\r\n      this.sendMessage(`/me @${tags.username}, ${game} has been added to the request queue.`);\r\n    }\r\n\r\n    this.props.addGame(game, tags.username);\r\n  }\r\n\r\n  sendMessage = (msg) => {\r\n    this.state.client.say(this.props.channel, msg)\r\n  }\r\n\r\n  render() {\r\n    return null;\r\n  }\r\n}\r\n","import { Component } from 'react';\n\nexport default class Sidebar extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      index: 0\n    }\n  }\n\n  printGame = (idx) => {\n    if(idx === this.props.nextGameIdx) {\n      return (<b style={{color:'aquamarine'}}>{this.props.history[idx]}</b>)\n    } else {\n      return this.props.history[idx]\n    }\n  }\n\n  render() {\n    return (\n      <div style={{marginLeft: \"12px\", width: \"33%\", textTransform: 'capitalize'}}>\n        <div style={{backgroundColor: \"darkslategrey\", borderRadius: \"5px\", marginTop: 0, padding: '1px', marginBottom: '10px'}}>\n          <p style={{fontSize: \"14px\", fontWeight: \"700\", height: '70px', padding: '8px'}}> Up Next:\n            {this.props.history.length > this.props.nextGameIdx\n               ? <p>{this.props.history[this.props.nextGameIdx]}</p>\n               : <p>not yet decided</p>}\n          </p>\n        </div>\n\n        <div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n          <button onClick={this.props.moveNextGameBack} style={{backgroundColor: \"darkcyan\", borderRadius: \"5px\", marginTop: 0, width: \"50%\", marginBottom: '20px', marginRight: '5px'}}> &#8678; </button>\n          <button onClick={this.props.moveNextGameFwd} style={{backgroundColor: \"darkcyan\", borderRadius: \"5px\", marginTop: 0, width: \"50%\", marginBottom: '20px', marginLeft: '5px'}}> &#8680; </button>\n        </div>\n\n        <div style={{backgroundColor: \"darkslategrey\", borderRadius: \"5px\", marginTop: 0, padding: '5px'}}>\n          <p style={{fontSize: \"14px\", fontWeight: \"700\"}}> History </p>\n          <p style={{fontSize: \"12px\"}}>\n            {this.props.history.map((playedGame, i) => <li key={i}>{this.printGame(i)}</li> )}\n            {this.props.history.length === 0 && <li key='0'>No games yet</li> }\n          </p>\n        </div>\n      </div>\n    )\n  }\n}\n","import { Component } from 'react';\nimport WheelComponent from 'react-wheel-of-prizes'\nimport GameRequest from './GameRequest'\nimport MessageHandler from './MessageHandler';\nimport Sidebar from './Sidebar'\nimport ChatActivity, { ActivityStatus } from './ChatActivity';\nconst randomColor = require('randomcolor');\n\n\nexport default class MainScreen extends Component {\n  constructor(props){\n    super(props);\n    this.chatActivity = new ChatActivity(this.props.channel)\n    this.state = {\n      messages: {},\n      colors: randomColor({count: 99, luminosity: 'light', hue: 'blue'}),\n      counter: 0,\n      history: [],\n      nextGameIdx: 0\n    };\n  }\n\n  moveNextGameFwd = () => {\n    if(this.state.nextGameIdx === this.state.history.length) return;\n    this.setState((state) => {\n      return {\n        ...this.state,\n        nextGameIdx: state.nextGameIdx+1\n      }\n    })\n  }\n\n  moveNextGameBack = () => {\n    if(this.state.nextGameIdx <= 0) return;\n    this.setState((state) => {\n      return {\n        ...this.state,\n        nextGameIdx: state.nextGameIdx-1\n      }\n    })\n  }\n\n  addGame  = (game, user) => {\n    this.setState((state) => {\n      return {\n        ...state,\n        messages: {\n          ...this.state.messages,\n          [game]: {\n            username: user,\n            time: Date.now(),\n            locked: false,\n            chosen: false\n          }\n        },\n        counter: this.state.counter + 1\n      };\n    })\n  }\n\n  toggleLock = (game) => {\n    const stateCopy = {...this.state.messages[game]};\n    stateCopy.locked = !stateCopy.locked\n\n    this.setState(() => {\n      return {\n        ...this.state,\n        messages: {\n          ...this.state.messages,\n          [game]: stateCopy\n        }\n      }\n    });\n  }\n\n  onGameChosen = (game) => {\n    if(Object.keys(this.state.messages).length === 0) return;\n\n    // send confirmation message in chat\n    const requester = this.state.messages[game].username;\n    this.chatActivity.getStatusPromise(requester).then((status) => {\n      let msg = \"\";\n      switch(status) {\n        case ActivityStatus.DISCONNECTED:\n          msg = `${game} just won the spin, but it doesn't seem like @${requester} is still around. Hope someone else wants to play!`\n          break;\n\n        case ActivityStatus.ACTIVE:\n          msg = `@${requester}, good news - ${game} just won the spin!`;\n          break;\n\n        case ActivityStatus.IDLE:\n        default:\n          msg += `@${requester}, good news - ${game} just won the spin! (I hope you're still around!)`;\n        }\n        this.messageHandler.sendMessage(msg);\n    })\n\n    // update history + game card highlight color\n    this.setState((state) => {\n      return {\n        ...state,\n        history: [\n          ...this.state.history,\n          game\n        ],\n        messages: {\n          ...state.messages,\n          [game]: {\n            ...state.messages[game],\n            chosen: true\n          }\n        }\n      }\n    })\n\n    // remove card unless it's locked\n    if(!this.state.messages[game].locked) {\n      setTimeout(() => {\n        this.removeGame(game, true);\n      }, 2500);\n    }\n  }\n\n  removeGame = (game) => {\n    const newMessageObj = {...this.state.messages};\n    delete newMessageObj[game];\n    this.setState((state) => {\n      return {\n        ...state,\n        messages: newMessageObj,\n        counter: this.state.counter + 1\n      };\n    })\n  }\n\n  onMessage = (message, user, metadata) => {\n    this.chatActivity.updateLastMessageTime(user);\n  }\n\n  render() {\n    const gameArray = Object.keys(this.state.messages);\n    let logOutBtn;\n    if (typeof this.props.onLogout === 'function') {\n        logOutBtn = (<button style={{position: 'absolute', top: 0, right: 0, backgroundColor: 'darkcyan', borderRadius: '5px', marginTop: 0, paddingBottom: '5px', paddingTop: '5px', color: '#fff'}} onClick={this.props.onLogout}>Logout &#10151;</button>);\n    }\n\n    return (\n      <div style={{display: 'flex'}}>\n        <MessageHandler\n          addGame={this.addGame}\n          messages={this.state.messages}\n          channel={this.props.channel}\n          access_token={this.props.access_token}\n          onMessage={this.onMessage}\n          onDelete={this.removeGame}\n          upcomingGames={this.state.history.slice(this.state.nextGameIdx)}\n          ref={(mh) => this.messageHandler = mh}\n        />\n        <div width=\"50vw\">\n          <h2 style={{marginBottom:\"0\"}}>Game Requests</h2>\n          <h4 style={{fontSize:\"20px\", color: \"yellow\", marginTop: \"6px\", marginBottom:\"12px\", fontWeight: 400}}>Type e.g. \"!request Blather Round\" in {this.props.channel}'s chat to add</h4>\n          <div style={{display:\"flex\", alignItems: \"flex-start\", height:\"100%\"}}>\n          <Sidebar\n            history={this.state.history}\n            nextGameIdx={this.state.nextGameIdx}\n            moveNextGameFwd={this.moveNextGameFwd}\n            moveNextGameBack={this.moveNextGameBack}\n          />\n          <div style={{flexGrow: \"2\", marginLeft: \"15px\"}}>\n              {gameArray.map((msg, i) =>\n                <GameRequest\n                  key={i}\n                  msg={msg}\n                  metadata={this.state.messages[msg]}\n                  onDelete={this.removeGame}\n                  toggleLock={this.toggleLock.bind(msg)}\n                  getActivity={this.chatActivity.getStatusPromise}\n              />)}\n            </div>\n          </div>\n        </div>\n        <div width=\"50vw\" style={{textTransform: 'capitalize'}}>\n          <div style={{fontSize: \"16px\", overflow: \"hidden\", width: \"600px\"}}>\n            <WheelComponent\n              key={this.state.counter}\n              segments={gameArray}\n              segColors={this.state.colors}\n              onFinished={this.onGameChosen}\n              isOnlyOnce={false}\n              size={250}\n              upDuration={100}\n              downDuration={1000}\n              primaryColor={\"white\"}\n              contrastColor={\"black\"}\n            />\n          {/*  <Modal/>*/}\n          </div>\n        </div>\n        {logOutBtn}\n      </div>\n    )\n  }\n}\n","\r\nimport React, { Component } from 'react';\r\nimport MainScreen from './MainScreen';\r\nimport { Redirect, withRouter } from \"react-router-dom\";\r\nimport queryString from 'query-string'\r\nconst fetch = require('node-fetch');\r\n\r\nclass AuthenticatedApp extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      username: localStorage.getItem('__username'),\r\n      access_token: localStorage.getItem('__access_token'),\r\n      failed_login: false\r\n    }\r\n    this.getAuth = this.getAuth.bind(this);\r\n    this.logOut = this.logOut.bind(this);\r\n  }\r\n  componentDidMount() {\r\n      if (!this.state.access_token) {\r\n          return this.getAuth();\r\n      }\r\n      fetch('https://api.twitch.tv/helix/users', {\r\n        headers: {\r\n          'Client-ID': process.env.REACT_APP_TWITCH_CLIENT_ID,\r\n          Authorization: `Bearer ${this.state.access_token}`\r\n        }\r\n      })\r\n      .then(r => r.json())\r\n      .then(userInfo => {\r\n        //console.log(userInfo); //login [aka lowercase username?], display_name, profile_image_url, description\r\n\r\n        localStorage.setItem('__username', userInfo.data[0].login);\r\n        this.setState((state) => {\r\n          return {\r\n            ...state,\r\n            username: userInfo.data[0].login,\r\n          };\r\n        })\r\n      })\r\n      .catch(e => this.getAuth)\r\n  }\r\n\r\n  logOut() {\r\n      localStorage.removeItem('__username');\r\n      localStorage.removeItem('__access_token');\r\n      fetch('https://id.twitch.tv/oauth2/revoke?' + new URLSearchParams({\r\n        client_id: process.env.REACT_APP_TWITCH_CLIENT_ID,\r\n        token: this.state.access_token,\r\n        redirect_uri: process.env.REACT_APP_REDIRECT_URI_NOENCODE\r\n      }), {\r\n        method: 'POST',\r\n        headers: {\r\n          Accept: 'application/vnd.twitchtv.v5+json'\r\n        }\r\n      })\r\n      .then(() => {\r\n          window.location.reload();\r\n      });\r\n  }\r\n\r\n  async getAuth(e) {\r\n      if (e) {\r\n          console.error(e);\r\n      }\r\n      localStorage.removeItem('__username');\r\n      localStorage.removeItem('__access_token');\r\n\r\n    const queryParams = queryString.parse(this.props.location.search);\r\n    await fetch('https://id.twitch.tv/oauth2/token?' + new URLSearchParams({\r\n      grant_type: 'authorization_code',\r\n      code: queryParams.code,\r\n      client_id: process.env.REACT_APP_TWITCH_CLIENT_ID,\r\n      client_secret: process.env.REACT_APP_TWITCH_CLIENT_SECRET,\r\n      redirect_uri: process.env.REACT_APP_REDIRECT_URI_NOENCODE\r\n    }), {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept: 'application/vnd.twitchtv.v5+json'\r\n      }\r\n    }).then(r => r.json())\r\n    .then((oauth) => {\r\n      //console.log(oauth); // access_token, refresh_token, expires_in, scope ['...']\r\n      if(!oauth.access_token) {\r\n        this.setState((state) => {\r\n          return {\r\n            ...state,\r\n            failed_login: true\r\n          };\r\n        });\r\n        return;\r\n      }\r\n\r\n      localStorage.setItem('__access_token', oauth.access_token);\r\n      this.setState((state) => {\r\n        return {\r\n          ...state,\r\n          access_token: oauth.access_token\r\n        };\r\n      });\r\n\r\n      fetch('https://api.twitch.tv/helix/users', {\r\n        headers: {\r\n          'Client-ID': process.env.REACT_APP_TWITCH_CLIENT_ID,\r\n          Authorization: `Bearer ${oauth.access_token}`\r\n        }\r\n      })\r\n      .then(r => r.json())\r\n      .then(userInfo => {\r\n        //console.log(userInfo); //login [aka lowercase username?], display_name, profile_image_url, description\r\n        localStorage.setItem('__username', userInfo.data[0].login);\r\n        this.setState((state) => {\r\n          return {\r\n            ...state,\r\n            username: userInfo.data[0].login,\r\n          };\r\n        })\r\n      })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.failed_login && this.props.location.pathname !== \"/gamelist\"\r\n          ? <Redirect to=\"/login\" />\r\n      : this.state.username && <MainScreen channel={this.state.username} access_token={this.state.access_token} onLogout={this.logOut} />}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default withRouter(AuthenticatedApp);\r\n","import { Component } from 'react';\nimport YAML from 'yaml'\nimport rawJackboxGameList from './JackboxGames.yaml';\nimport './JackboxGameList.css';\nconst fetch = require('node-fetch');\n\nconst PartyPackCard = function (props) {\n  const gameList = Object.keys(props.metadata);\n  return (\n    <div className=\"partyPackCard\">\n      <p className=\"partyPackName\">{props.partyPackName} </p>\n      {gameList.map((gameName, i) =>\n        <GameCard\n          key={i}\n          gameName={gameName}\n          possibleMatches={props.metadata[gameName]}\n        />\n      )}\n    </div>\n  );\n}\n\n\n// <p> {props.gameName} <p>\n\nconst GameCard = function(props) {\n  console.log(props.possibleMatches);\n  return (\n    <div>\n      <p className=\"gameName\">{props.gameName} </p>\n      {props.possibleMatches.map((possibleMatch, i) =>\n        <li className=\"possibleGameMatch\">!request {possibleMatch}</li>\n      )}\n    </div>\n  );\n}\n\nexport default class JackboxGameList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      validGames: []\n    };\n  }\n\n  componentDidMount(props) {\n    fetch(rawJackboxGameList)\n      .then(r => r.text())\n      .then(text => {\n        this.setState((state) => {\n          return {\n            ...state,\n            validGames: YAML.parse(text)\n          };\n        });\n      })\n    }\n\n\n\n    render() {\n      const partyPackList = Object.keys(this.state.validGames);\n      console.log(partyPackList);\n      return (\n        <div className=\"partyPackList\">\n          {partyPackList.map((partyPackName, i) =>\n            <PartyPackCard\n              key={i}\n              partyPackName={partyPackName}\n              metadata={this.state.validGames[partyPackName]}\n            />\n          )}\n        </div>\n      );\n    }\n\n}\n","// import logo from './logo.svg';\nimport './App.css';\nimport AuthenticatedApp from './AuthenticatedApp';\nimport React, { Component } from 'react';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport JackboxGameList from './JackboxGameList';\n\nconst loginScreen = function() {\n  const loginUrl = `https://id.twitch.tv/oauth2/authorize?client_id=${process.env.REACT_APP_TWITCH_CLIENT_ID}&response_type=code&scope=chat:read chat:edit&redirect_uri=${process.env.REACT_APP_REDIRECT_URI}`\n  return (\n    <a href={loginUrl} style={{backgroundColor: 'rebeccapurple', borderRadius: '5px', padding: '10px', color: 'white'}}>Log In With Twitch</a>\n  );\n}\n\nclass App extends Component {\n  render() {\n\n    return (\n      <HashRouter basename='/'>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <Route exact path=\"/login\">\n              {loginScreen()}\n            </Route>\n            <Route path=\"/\" component={AuthenticatedApp} />\n            <Route path=\"/gamelist\" component={JackboxGameList} />\n          </header>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}